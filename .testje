
>> SUB {
  node: { name: 'statement', children: { directive: [Array] } },
  parentCtx: {}
}
>> SUB {
  node: { name: 'directive', children: { prefixID: [Array] } },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'prefixID',
    children: {
      TTL_PREFIX: [Array],
      PNAME_NS: [Array],
      IRIREF: [Array],
      Period: [Array]
    }
  },
  parentCtx: {
    node: { name: 'directive', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '@prefix',
    startOffset: 0,
    endOffset: 6,
    startLine: 1,
    endLine: 1,
    startColumn: 1,
    endColumn: 7,
    tokenTypeIdx: 184,
    tokenType: {
      PATTERN: /@prefix/,
      tokenTypeIdx: 184,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'TTL_PREFIX',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '@prefix',
    startOffset: 0,
    endOffset: 6,
    startLine: 1,
    endLine: 1,
    startColumn: 1,
    endColumn: 7,
    tokenTypeIdx: 184,
    tokenType: {
      PATTERN: /@prefix/,
      tokenTypeIdx: 184,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'TTL_PREFIX',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:',
    startOffset: 8,
    endOffset: 10,
    startLine: 1,
    endLine: 1,
    startColumn: 9,
    endColumn: 11,
    tokenTypeIdx: 20,
    tokenType: {
      PATTERN: /((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:)/,
      tokenTypeIdx: 20,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'PNAME_NS',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:',
    startOffset: 8,
    endOffset: 10,
    startLine: 1,
    endLine: 1,
    startColumn: 9,
    endColumn: 11,
    tokenTypeIdx: 20,
    tokenType: {
      PATTERN: /((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:)/,
      tokenTypeIdx: 20,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'PNAME_NS',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/shacl#> ',
    startOffset: 17,
    endOffset: 46,
    startLine: 1,
    endLine: 1,
    startColumn: 18,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/shacl#> ',
    startOffset: 17,
    endOffset: 46,
    startLine: 1,
    endLine: 1,
    startColumn: 18,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 47,
    endOffset: 47,
    startLine: 1,
    endLine: 1,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 47,
    endOffset: 47,
    startLine: 1,
    endLine: 1,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'statement', children: { directive: [Array] } },
  parentCtx: {}
}
>> SUB {
  node: { name: 'directive', children: { prefixID: [Array] } },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'prefixID',
    children: {
      TTL_PREFIX: [Array],
      PNAME_NS: [Array],
      IRIREF: [Array],
      Period: [Array]
    }
  },
  parentCtx: {
    node: { name: 'directive', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '@prefix',
    startOffset: 49,
    endOffset: 55,
    startLine: 2,
    endLine: 2,
    startColumn: 1,
    endColumn: 7,
    tokenTypeIdx: 184,
    tokenType: {
      PATTERN: /@prefix/,
      tokenTypeIdx: 184,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'TTL_PREFIX',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '@prefix',
    startOffset: 49,
    endOffset: 55,
    startLine: 2,
    endLine: 2,
    startColumn: 1,
    endColumn: 7,
    tokenTypeIdx: 184,
    tokenType: {
      PATTERN: /@prefix/,
      tokenTypeIdx: 184,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'TTL_PREFIX',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'qb:',
    startOffset: 57,
    endOffset: 59,
    startLine: 2,
    endLine: 2,
    startColumn: 9,
    endColumn: 11,
    tokenTypeIdx: 20,
    tokenType: {
      PATTERN: /((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:)/,
      tokenTypeIdx: 20,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'PNAME_NS',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'qb:',
    startOffset: 57,
    endOffset: 59,
    startLine: 2,
    endLine: 2,
    startColumn: 9,
    endColumn: 11,
    tokenTypeIdx: 20,
    tokenType: {
      PATTERN: /((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:)/,
      tokenTypeIdx: 20,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'PNAME_NS',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/linked-data/cube#> ',
    startOffset: 66,
    endOffset: 101,
    startLine: 2,
    endLine: 2,
    startColumn: 18,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/linked-data/cube#> ',
    startOffset: 66,
    endOffset: 101,
    startLine: 2,
    endLine: 2,
    startColumn: 18,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 102,
    endOffset: 102,
    startLine: 2,
    endLine: 2,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 102,
    endOffset: 102,
    startLine: 2,
    endLine: 2,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'prefixID', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GemeenteShape>',
    startOffset: 104,
    endOffset: 165,
    startLine: 3,
    endLine: 3,
    startColumn: 1,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GemeenteShape>',
    startOffset: 104,
    endOffset: 165,
    startLine: 3,
    endLine: 3,
    startColumn: 1,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 168,
    endOffset: 168,
    startLine: 4,
    endLine: 4,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 168,
    endOffset: 168,
    startLine: 4,
    endLine: 4,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 170,
    endOffset: 181,
    startLine: 4,
    endLine: 4,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 170,
    endOffset: 181,
    startLine: 4,
    endLine: 4,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 186,
    endOffset: 199,
    startLine: 5,
    endLine: 5,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 186,
    endOffset: 199,
    startLine: 5,
    endLine: 5,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 201,
    endOffset: 250,
    startLine: 5,
    endLine: 5,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 201,
    endOffset: 250,
    startLine: 5,
    endLine: 5,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 254,
    endOffset: 262,
    startLine: 6,
    endLine: 6,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 254,
    endOffset: 262,
    startLine: 6,
    endLine: 6,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 264,
    endOffset: 268,
    startLine: 6,
    endLine: 6,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 264,
    endOffset: 268,
    startLine: 6,
    endLine: 6,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 183,
    endOffset: 183,
    startLine: 4,
    endLine: 4,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 183,
    endOffset: 183,
    startLine: 4,
    endLine: 4,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 251,
    endOffset: 251,
    startLine: 5,
    endLine: 5,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 251,
    endOffset: 251,
    startLine: 5,
    endLine: 5,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 270,
    endOffset: 270,
    startLine: 6,
    endLine: 6,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 270,
    endOffset: 270,
    startLine: 6,
    endLine: 6,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#PlaatsShape>',
    startOffset: 273,
    endOffset: 332,
    startLine: 8,
    endLine: 8,
    startColumn: 1,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#PlaatsShape>',
    startOffset: 273,
    endOffset: 332,
    startLine: 8,
    endLine: 8,
    startColumn: 1,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 335,
    endOffset: 335,
    startLine: 9,
    endLine: 9,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 335,
    endOffset: 335,
    startLine: 9,
    endLine: 9,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 337,
    endOffset: 348,
    startLine: 9,
    endLine: 9,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 337,
    endOffset: 348,
    startLine: 9,
    endLine: 9,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 353,
    endOffset: 366,
    startLine: 10,
    endLine: 10,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 353,
    endOffset: 366,
    startLine: 10,
    endLine: 10,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/dc/terms/Location> ',
    startOffset: 368,
    endOffset: 403,
    startLine: 10,
    endLine: 10,
    startColumn: 17,
    endColumn: 52,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/dc/terms/Location> ',
    startOffset: 368,
    endOffset: 403,
    startLine: 10,
    endLine: 10,
    startColumn: 17,
    endColumn: 52,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 407,
    endOffset: 417,
    startLine: 11,
    endLine: 11,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 407,
    endOffset: 417,
    startLine: 11,
    endLine: 11,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 419,
    endOffset: 419,
    startLine: 11,
    endLine: 11,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 419,
    endOffset: 419,
    startLine: 11,
    endLine: 11,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 423,
    endOffset: 429,
    startLine: 12,
    endLine: 12,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 423,
    endOffset: 429,
    startLine: 12,
    endLine: 12,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 448,
    endOffset: 461,
    startLine: 13,
    endLine: 13,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 448,
    endOffset: 461,
    startLine: 13,
    endLine: 13,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"plaatsnaam"',
    startOffset: 431,
    endOffset: 442,
    startLine: 12,
    endLine: 12,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"plaatsnaam"',
    startOffset: 431,
    endOffset: 442,
    startLine: 12,
    endLine: 12,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam van de plaats of van het gebied."',
    startOffset: 463,
    endOffset: 501,
    startLine: 13,
    endLine: 13,
    startColumn: 18,
    endColumn: 56,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam van de plaats of van het gebied."',
    startOffset: 463,
    endOffset: 501,
    startLine: 13,
    endLine: 13,
    startColumn: 18,
    endColumn: 56,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 444,
    endOffset: 444,
    startLine: 12,
    endLine: 12,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 444,
    endOffset: 444,
    startLine: 12,
    endLine: 12,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 503,
    endOffset: 503,
    startLine: 13,
    endLine: 13,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 503,
    endOffset: 503,
    startLine: 13,
    endLine: 13,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 560,
    endOffset: 560,
    startLine: 14,
    endLine: 14,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 560,
    endOffset: 560,
    startLine: 14,
    endLine: 14,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 632,
    endOffset: 632,
    startLine: 15,
    endLine: 15,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 632,
    endOffset: 632,
    startLine: 15,
    endLine: 15,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 650,
    endOffset: 650,
    startLine: 16,
    endLine: 16,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 650,
    endOffset: 650,
    startLine: 16,
    endLine: 16,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 507,
    endOffset: 513,
    startLine: 14,
    endLine: 14,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 507,
    endOffset: 513,
    startLine: 14,
    endLine: 14,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 515,
    endOffset: 559,
    startLine: 14,
    endLine: 14,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 515,
    endOffset: 559,
    startLine: 14,
    endLine: 14,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 564,
    endOffset: 574,
    startLine: 15,
    endLine: 15,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 564,
    endOffset: 574,
    startLine: 15,
    endLine: 15,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 576,
    endOffset: 631,
    startLine: 15,
    endLine: 15,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 576,
    endOffset: 631,
    startLine: 15,
    endLine: 15,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 636,
    endOffset: 646,
    startLine: 16,
    endLine: 16,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 636,
    endOffset: 646,
    startLine: 16,
    endLine: 16,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 648,
    endOffset: 648,
    startLine: 16,
    endLine: 16,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 648,
    endOffset: 648,
    startLine: 16,
    endLine: 16,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 653,
    endOffset: 653,
    startLine: 17,
    endLine: 17,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 653,
    endOffset: 653,
    startLine: 17,
    endLine: 17,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 658,
    endOffset: 668,
    startLine: 18,
    endLine: 18,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 658,
    endOffset: 668,
    startLine: 18,
    endLine: 18,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 670,
    endOffset: 670,
    startLine: 18,
    endLine: 18,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 670,
    endOffset: 670,
    startLine: 18,
    endLine: 18,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 674,
    endOffset: 680,
    startLine: 19,
    endLine: 19,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 674,
    endOffset: 680,
    startLine: 19,
    endLine: 19,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 698,
    endOffset: 711,
    startLine: 20,
    endLine: 20,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 698,
    endOffset: 711,
    startLine: 20,
    endLine: 20,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"geometrie"',
    startOffset: 682,
    endOffset: 692,
    startLine: 19,
    endLine: 19,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"geometrie"',
    startOffset: 682,
    endOffset: 692,
    startLine: 19,
    endLine: 19,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geometrie van de plaats of het gebied."',
    startOffset: 713,
    endOffset: 752,
    startLine: 20,
    endLine: 20,
    startColumn: 18,
    endColumn: 57,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geometrie van de plaats of het gebied."',
    startOffset: 713,
    endOffset: 752,
    startLine: 20,
    endLine: 20,
    startColumn: 18,
    endColumn: 57,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 694,
    endOffset: 694,
    startLine: 19,
    endLine: 19,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 694,
    endOffset: 694,
    startLine: 19,
    endLine: 19,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 754,
    endOffset: 754,
    startLine: 20,
    endLine: 20,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 754,
    endOffset: 754,
    startLine: 20,
    endLine: 20,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 803,
    endOffset: 803,
    startLine: 21,
    endLine: 21,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 803,
    endOffset: 803,
    startLine: 21,
    endLine: 21,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 867,
    endOffset: 867,
    startLine: 22,
    endLine: 22,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 867,
    endOffset: 867,
    startLine: 22,
    endLine: 22,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 885,
    endOffset: 885,
    startLine: 23,
    endLine: 23,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 885,
    endOffset: 885,
    startLine: 23,
    endLine: 23,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 758,
    endOffset: 764,
    startLine: 21,
    endLine: 21,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 758,
    endOffset: 764,
    startLine: 21,
    endLine: 21,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#geometry> ',
    startOffset: 766,
    endOffset: 802,
    startLine: 21,
    endLine: 21,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#geometry> ',
    startOffset: 766,
    endOffset: 802,
    startLine: 21,
    endLine: 21,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 807,
    endOffset: 814,
    startLine: 22,
    endLine: 22,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 807,
    endOffset: 814,
    startLine: 22,
    endLine: 22,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Geometrie> ',
    startOffset: 816,
    endOffset: 866,
    startLine: 22,
    endLine: 22,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Geometrie> ',
    startOffset: 816,
    endOffset: 866,
    startLine: 22,
    endLine: 22,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 871,
    endOffset: 881,
    startLine: 23,
    endLine: 23,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 871,
    endOffset: 881,
    startLine: 23,
    endLine: 23,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 883,
    endOffset: 883,
    startLine: 23,
    endLine: 23,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 883,
    endOffset: 883,
    startLine: 23,
    endLine: 23,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 888,
    endOffset: 888,
    startLine: 24,
    endLine: 24,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 888,
    endOffset: 888,
    startLine: 24,
    endLine: 24,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 893,
    endOffset: 901,
    startLine: 25,
    endLine: 25,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 893,
    endOffset: 901,
    startLine: 25,
    endLine: 25,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 903,
    endOffset: 907,
    startLine: 25,
    endLine: 25,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 903,
    endOffset: 907,
    startLine: 25,
    endLine: 25,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 350,
    endOffset: 350,
    startLine: 9,
    endLine: 9,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 350,
    endOffset: 350,
    startLine: 9,
    endLine: 9,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 404,
    endOffset: 404,
    startLine: 10,
    endLine: 10,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 404,
    endOffset: 404,
    startLine: 10,
    endLine: 10,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 655,
    endOffset: 655,
    startLine: 17,
    endLine: 17,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 655,
    endOffset: 655,
    startLine: 17,
    endLine: 17,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 890,
    endOffset: 890,
    startLine: 24,
    endLine: 24,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 890,
    endOffset: 890,
    startLine: 24,
    endLine: 24,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 909,
    endOffset: 909,
    startLine: 25,
    endLine: 25,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 909,
    endOffset: 909,
    startLine: 25,
    endLine: 25,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GeografischeNaamShape>',
    startOffset: 912,
    endOffset: 981,
    startLine: 27,
    endLine: 27,
    startColumn: 1,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GeografischeNaamShape>',
    startOffset: 912,
    endOffset: 981,
    startLine: 27,
    endLine: 27,
    startColumn: 1,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 984,
    endOffset: 984,
    startLine: 28,
    endLine: 28,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 984,
    endOffset: 984,
    startLine: 28,
    endLine: 28,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 986,
    endOffset: 997,
    startLine: 28,
    endLine: 28,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 986,
    endOffset: 997,
    startLine: 28,
    endLine: 28,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 1002,
    endOffset: 1015,
    startLine: 29,
    endLine: 29,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 1002,
    endOffset: 1015,
    startLine: 29,
    endLine: 29,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 1017,
    endOffset: 1072,
    startLine: 29,
    endLine: 29,
    startColumn: 17,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 1017,
    endOffset: 1072,
    startLine: 29,
    endLine: 29,
    startColumn: 17,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 1076,
    endOffset: 1084,
    startLine: 30,
    endLine: 30,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 1076,
    endOffset: 1084,
    startLine: 30,
    endLine: 30,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 1086,
    endOffset: 1090,
    startLine: 30,
    endLine: 30,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 1086,
    endOffset: 1090,
    startLine: 30,
    endLine: 30,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 999,
    endOffset: 999,
    startLine: 28,
    endLine: 28,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 999,
    endOffset: 999,
    startLine: 28,
    endLine: 28,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1073,
    endOffset: 1073,
    startLine: 29,
    endLine: 29,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1073,
    endOffset: 1073,
    startLine: 29,
    endLine: 29,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 1092,
    endOffset: 1092,
    startLine: 30,
    endLine: 30,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 1092,
    endOffset: 1092,
    startLine: 30,
    endLine: 30,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GeografischePositieShape>',
    startOffset: 1095,
    endOffset: 1167,
    startLine: 32,
    endLine: 32,
    startColumn: 1,
    endColumn: 73,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GeografischePositieShape>',
    startOffset: 1095,
    endOffset: 1167,
    startLine: 32,
    endLine: 32,
    startColumn: 1,
    endColumn: 73,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 1170,
    endOffset: 1170,
    startLine: 33,
    endLine: 33,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 1170,
    endOffset: 1170,
    startLine: 33,
    endLine: 33,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 1172,
    endOffset: 1183,
    startLine: 33,
    endLine: 33,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 1172,
    endOffset: 1183,
    startLine: 33,
    endLine: 33,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 1188,
    endOffset: 1201,
    startLine: 34,
    endLine: 34,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 1188,
    endOffset: 1201,
    startLine: 34,
    endLine: 34,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#GeografischePositie> ',
    startOffset: 1203,
    endOffset: 1263,
    startLine: 34,
    endLine: 34,
    startColumn: 17,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#GeografischePositie> ',
    startOffset: 1203,
    endOffset: 1263,
    startLine: 34,
    endLine: 34,
    startColumn: 17,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 1267,
    endOffset: 1277,
    startLine: 35,
    endLine: 35,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 1267,
    endOffset: 1277,
    startLine: 35,
    endLine: 35,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1279,
    endOffset: 1279,
    startLine: 35,
    endLine: 35,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1279,
    endOffset: 1279,
    startLine: 35,
    endLine: 35,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1283,
    endOffset: 1289,
    startLine: 36,
    endLine: 36,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1283,
    endOffset: 1289,
    startLine: 36,
    endLine: 36,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1307,
    endOffset: 1320,
    startLine: 37,
    endLine: 37,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1307,
    endOffset: 1320,
    startLine: 37,
    endLine: 37,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"geometrie"',
    startOffset: 1291,
    endOffset: 1301,
    startLine: 36,
    endLine: 36,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"geometrie"',
    startOffset: 1291,
    endOffset: 1301,
    startLine: 36,
    endLine: 36,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De cartografische co├╢ordinaten vh punt."',
    startOffset: 1322,
    endOffset: 1362,
    startLine: 37,
    endLine: 37,
    startColumn: 18,
    endColumn: 58,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De cartografische co├╢ordinaten vh punt."',
    startOffset: 1322,
    endOffset: 1362,
    startLine: 37,
    endLine: 37,
    startColumn: 18,
    endColumn: 58,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1303,
    endOffset: 1303,
    startLine: 36,
    endLine: 36,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1303,
    endOffset: 1303,
    startLine: 36,
    endLine: 36,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1364,
    endOffset: 1364,
    startLine: 37,
    endLine: 37,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1364,
    endOffset: 1364,
    startLine: 37,
    endLine: 37,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1413,
    endOffset: 1413,
    startLine: 38,
    endLine: 38,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1413,
    endOffset: 1413,
    startLine: 38,
    endLine: 38,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1464,
    endOffset: 1464,
    startLine: 39,
    endLine: 39,
    startColumn: 50,
    endColumn: 50,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1464,
    endOffset: 1464,
    startLine: 39,
    endLine: 39,
    startColumn: 50,
    endColumn: 50,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1482,
    endOffset: 1482,
    startLine: 40,
    endLine: 40,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1482,
    endOffset: 1482,
    startLine: 40,
    endLine: 40,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1500,
    endOffset: 1500,
    startLine: 41,
    endLine: 41,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1500,
    endOffset: 1500,
    startLine: 41,
    endLine: 41,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1368,
    endOffset: 1374,
    startLine: 38,
    endLine: 38,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1368,
    endOffset: 1374,
    startLine: 38,
    endLine: 38,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#geometry> ',
    startOffset: 1376,
    endOffset: 1412,
    startLine: 38,
    endLine: 38,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#geometry> ',
    startOffset: 1376,
    endOffset: 1412,
    startLine: 38,
    endLine: 38,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 1417,
    endOffset: 1424,
    startLine: 39,
    endLine: 39,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 1417,
    endOffset: 1424,
    startLine: 39,
    endLine: 39,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.opengis.net/ont/sf#Point> ',
    startOffset: 1426,
    endOffset: 1463,
    startLine: 39,
    endLine: 39,
    startColumn: 12,
    endColumn: 49,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.opengis.net/ont/sf#Point> ',
    startOffset: 1426,
    endOffset: 1463,
    startLine: 39,
    endLine: 39,
    startColumn: 12,
    endColumn: 49,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 1468,
    endOffset: 1478,
    startLine: 40,
    endLine: 40,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 1468,
    endOffset: 1478,
    startLine: 40,
    endLine: 40,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1480,
    endOffset: 1480,
    startLine: 40,
    endLine: 40,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1480,
    endOffset: 1480,
    startLine: 40,
    endLine: 40,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 1486,
    endOffset: 1496,
    startLine: 41,
    endLine: 41,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 1486,
    endOffset: 1496,
    startLine: 41,
    endLine: 41,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1498,
    endOffset: 1498,
    startLine: 41,
    endLine: 41,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1498,
    endOffset: 1498,
    startLine: 41,
    endLine: 41,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 1503,
    endOffset: 1503,
    startLine: 42,
    endLine: 42,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 1503,
    endOffset: 1503,
    startLine: 42,
    endLine: 42,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 1508,
    endOffset: 1518,
    startLine: 43,
    endLine: 43,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 1508,
    endOffset: 1518,
    startLine: 43,
    endLine: 43,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1520,
    endOffset: 1520,
    startLine: 43,
    endLine: 43,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1520,
    endOffset: 1520,
    startLine: 43,
    endLine: 43,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1524,
    endOffset: 1530,
    startLine: 44,
    endLine: 44,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1524,
    endOffset: 1530,
    startLine: 44,
    endLine: 44,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1546,
    endOffset: 1559,
    startLine: 45,
    endLine: 45,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1546,
    endOffset: 1559,
    startLine: 45,
    endLine: 45,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"default"',
    startOffset: 1532,
    endOffset: 1540,
    startLine: 44,
    endLine: 44,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"default"',
    startOffset: 1532,
    endOffset: 1540,
    startLine: 44,
    endLine: 44,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geeft aan of de positie een default positie is."',
    startOffset: 1561,
    endOffset: 1609,
    startLine: 45,
    endLine: 45,
    startColumn: 18,
    endColumn: 66,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geeft aan of de positie een default positie is."',
    startOffset: 1561,
    endOffset: 1609,
    startLine: 45,
    endLine: 45,
    startColumn: 18,
    endColumn: 66,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1542,
    endOffset: 1542,
    startLine: 44,
    endLine: 44,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1542,
    endOffset: 1542,
    startLine: 44,
    endLine: 44,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1611,
    endOffset: 1611,
    startLine: 45,
    endLine: 45,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1611,
    endOffset: 1611,
    startLine: 45,
    endLine: 45,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1672,
    endOffset: 1672,
    startLine: 46,
    endLine: 46,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1672,
    endOffset: 1672,
    startLine: 46,
    endLine: 46,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1615,
    endOffset: 1621,
    startLine: 46,
    endLine: 46,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1615,
    endOffset: 1621,
    startLine: 46,
    endLine: 46,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#default> ',
    startOffset: 1623,
    endOffset: 1671,
    startLine: 46,
    endLine: 46,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#default> ',
    startOffset: 1623,
    endOffset: 1671,
    startLine: 46,
    endLine: 46,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 1676,
    endOffset: 1686,
    startLine: 47,
    endLine: 47,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 1676,
    endOffset: 1686,
    startLine: 47,
    endLine: 47,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#boolean',
    startOffset: 1688,
    endOffset: 1728,
    startLine: 47,
    endLine: 47,
    startColumn: 15,
    endColumn: 55,
    tokenTypeIdx: 229,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#boolean',
      CATEGORIES: [Array],
      tokenTypeIdx: 229,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_boolean_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#boolean',
    startOffset: 1688,
    endOffset: 1728,
    startLine: 47,
    endLine: 47,
    startColumn: 15,
    endColumn: 55,
    tokenTypeIdx: 229,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#boolean',
      CATEGORIES: [Array],
      tokenTypeIdx: 229,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_boolean_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 1735,
    endOffset: 1745,
    startLine: 48,
    endLine: 48,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 1735,
    endOffset: 1745,
    startLine: 48,
    endLine: 48,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1747,
    endOffset: 1747,
    startLine: 48,
    endLine: 48,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1747,
    endOffset: 1747,
    startLine: 48,
    endLine: 48,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 1753,
    endOffset: 1763,
    startLine: 49,
    endLine: 49,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 1753,
    endOffset: 1763,
    startLine: 49,
    endLine: 49,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1765,
    endOffset: 1765,
    startLine: 49,
    endLine: 49,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 1765,
    endOffset: 1765,
    startLine: 49,
    endLine: 49,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1185,
    endOffset: 1185,
    startLine: 33,
    endLine: 33,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1185,
    endOffset: 1185,
    startLine: 33,
    endLine: 33,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1264,
    endOffset: 1264,
    startLine: 34,
    endLine: 34,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1264,
    endOffset: 1264,
    startLine: 34,
    endLine: 34,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1505,
    endOffset: 1505,
    startLine: 42,
    endLine: 42,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1505,
    endOffset: 1505,
    startLine: 42,
    endLine: 42,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1731,
    endOffset: 1731,
    startLine: 47,
    endLine: 47,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1731,
    endOffset: 1731,
    startLine: 47,
    endLine: 47,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1749,
    endOffset: 1749,
    startLine: 48,
    endLine: 48,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1749,
    endOffset: 1749,
    startLine: 48,
    endLine: 48,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1767,
    endOffset: 1767,
    startLine: 49,
    endLine: 49,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1767,
    endOffset: 1767,
    startLine: 49,
    endLine: 49,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1787,
    endOffset: 1787,
    startLine: 51,
    endLine: 51,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 1787,
    endOffset: 1787,
    startLine: 51,
    endLine: 51,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1791,
    endOffset: 1797,
    startLine: 52,
    endLine: 52,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 1791,
    endOffset: 1797,
    startLine: 52,
    endLine: 52,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1818,
    endOffset: 1831,
    startLine: 53,
    endLine: 53,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 1818,
    endOffset: 1831,
    startLine: 53,
    endLine: 53,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"specificatie"',
    startOffset: 1799,
    endOffset: 1812,
    startLine: 52,
    endLine: 52,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"specificatie"',
    startOffset: 1799,
    endOffset: 1812,
    startLine: 52,
    endLine: 52,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het type object op basis waarvan het punt werd bepaald.\t"',
    startOffset: 1833,
    endOffset: 1890,
    startLine: 53,
    endLine: 53,
    startColumn: 18,
    endColumn: 75,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het type object op basis waarvan het punt werd bepaald.\t"',
    startOffset: 1833,
    endOffset: 1890,
    startLine: 53,
    endLine: 53,
    startColumn: 18,
    endColumn: 75,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1814,
    endOffset: 1814,
    startLine: 52,
    endLine: 52,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1814,
    endOffset: 1814,
    startLine: 52,
    endLine: 52,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1892,
    endOffset: 1892,
    startLine: 53,
    endLine: 53,
    startColumn: 77,
    endColumn: 77,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1892,
    endOffset: 1892,
    startLine: 53,
    endLine: 53,
    startColumn: 77,
    endColumn: 77,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1958,
    endOffset: 1958,
    startLine: 54,
    endLine: 54,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 1958,
    endOffset: 1958,
    startLine: 54,
    endLine: 54,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2017,
    endOffset: 2017,
    startLine: 55,
    endLine: 55,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2017,
    endOffset: 2017,
    startLine: 55,
    endLine: 55,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2035,
    endOffset: 2035,
    startLine: 56,
    endLine: 56,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2035,
    endOffset: 2035,
    startLine: 56,
    endLine: 56,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1896,
    endOffset: 1902,
    startLine: 54,
    endLine: 54,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 1896,
    endOffset: 1902,
    startLine: 54,
    endLine: 54,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#specificatie> ',
    startOffset: 1904,
    endOffset: 1957,
    startLine: 54,
    endLine: 54,
    startColumn: 11,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#specificatie> ',
    startOffset: 1904,
    endOffset: 1957,
    startLine: 54,
    endLine: 54,
    startColumn: 11,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 1962,
    endOffset: 1969,
    startLine: 55,
    endLine: 55,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 1962,
    endOffset: 1969,
    startLine: 55,
    endLine: 55,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 1971,
    endOffset: 2016,
    startLine: 55,
    endLine: 55,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 1971,
    endOffset: 2016,
    startLine: 55,
    endLine: 55,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 2021,
    endOffset: 2031,
    startLine: 56,
    endLine: 56,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 2021,
    endOffset: 2031,
    startLine: 56,
    endLine: 56,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 2033,
    endOffset: 2033,
    startLine: 56,
    endLine: 56,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 2033,
    endOffset: 2033,
    startLine: 56,
    endLine: 56,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2038,
    endOffset: 2038,
    startLine: 57,
    endLine: 57,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2038,
    endOffset: 2038,
    startLine: 57,
    endLine: 57,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2055,
    endOffset: 2055,
    startLine: 58,
    endLine: 58,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2055,
    endOffset: 2055,
    startLine: 58,
    endLine: 58,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2059,
    endOffset: 2065,
    startLine: 59,
    endLine: 59,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2059,
    endOffset: 2065,
    startLine: 59,
    endLine: 59,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2081,
    endOffset: 2094,
    startLine: 60,
    endLine: 60,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2081,
    endOffset: 2094,
    startLine: 60,
    endLine: 60,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"methode"',
    startOffset: 2067,
    endOffset: 2075,
    startLine: 59,
    endLine: 59,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"methode"',
    startOffset: 2067,
    endOffset: 2075,
    startLine: 59,
    endLine: 59,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De manier waarop het punt werd bepaald."',
    startOffset: 2096,
    endOffset: 2136,
    startLine: 60,
    endLine: 60,
    startColumn: 18,
    endColumn: 58,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De manier waarop het punt werd bepaald."',
    startOffset: 2096,
    endOffset: 2136,
    startLine: 60,
    endLine: 60,
    startColumn: 18,
    endColumn: 58,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2077,
    endOffset: 2077,
    startLine: 59,
    endLine: 59,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2077,
    endOffset: 2077,
    startLine: 59,
    endLine: 59,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2138,
    endOffset: 2138,
    startLine: 60,
    endLine: 60,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2138,
    endOffset: 2138,
    startLine: 60,
    endLine: 60,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2199,
    endOffset: 2199,
    startLine: 61,
    endLine: 61,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2199,
    endOffset: 2199,
    startLine: 61,
    endLine: 61,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2258,
    endOffset: 2258,
    startLine: 62,
    endLine: 62,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2258,
    endOffset: 2258,
    startLine: 62,
    endLine: 62,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2276,
    endOffset: 2276,
    startLine: 63,
    endLine: 63,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2276,
    endOffset: 2276,
    startLine: 63,
    endLine: 63,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2142,
    endOffset: 2148,
    startLine: 61,
    endLine: 61,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2142,
    endOffset: 2148,
    startLine: 61,
    endLine: 61,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#methode> ',
    startOffset: 2150,
    endOffset: 2198,
    startLine: 61,
    endLine: 61,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#methode> ',
    startOffset: 2150,
    endOffset: 2198,
    startLine: 61,
    endLine: 61,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2203,
    endOffset: 2210,
    startLine: 62,
    endLine: 62,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2203,
    endOffset: 2210,
    startLine: 62,
    endLine: 62,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 2212,
    endOffset: 2257,
    startLine: 62,
    endLine: 62,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 2212,
    endOffset: 2257,
    startLine: 62,
    endLine: 62,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 2262,
    endOffset: 2272,
    startLine: 63,
    endLine: 63,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 2262,
    endOffset: 2272,
    startLine: 63,
    endLine: 63,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 2274,
    endOffset: 2274,
    startLine: 63,
    endLine: 63,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 2274,
    endOffset: 2274,
    startLine: 63,
    endLine: 63,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2279,
    endOffset: 2279,
    startLine: 64,
    endLine: 64,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2279,
    endOffset: 2279,
    startLine: 64,
    endLine: 64,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdreslocatorShape>',
    startOffset: 2303,
    endOffset: 2368,
    startLine: 67,
    endLine: 67,
    startColumn: 1,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdreslocatorShape>',
    startOffset: 2303,
    endOffset: 2368,
    startLine: 67,
    endLine: 67,
    startColumn: 1,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 2371,
    endOffset: 2371,
    startLine: 68,
    endLine: 68,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 2371,
    endOffset: 2371,
    startLine: 68,
    endLine: 68,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 2373,
    endOffset: 2384,
    startLine: 68,
    endLine: 68,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 2373,
    endOffset: 2384,
    startLine: 68,
    endLine: 68,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 2389,
    endOffset: 2402,
    startLine: 69,
    endLine: 69,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 2389,
    endOffset: 2402,
    startLine: 69,
    endLine: 69,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adreslocator> ',
    startOffset: 2404,
    endOffset: 2454,
    startLine: 69,
    endLine: 69,
    startColumn: 17,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adreslocator> ',
    startOffset: 2404,
    endOffset: 2454,
    startLine: 69,
    endLine: 69,
    startColumn: 17,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 2458,
    endOffset: 2468,
    startLine: 70,
    endLine: 70,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 2458,
    endOffset: 2468,
    startLine: 70,
    endLine: 70,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2470,
    endOffset: 2470,
    startLine: 70,
    endLine: 70,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2470,
    endOffset: 2470,
    startLine: 70,
    endLine: 70,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2474,
    endOffset: 2480,
    startLine: 71,
    endLine: 71,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2474,
    endOffset: 2480,
    startLine: 71,
    endLine: 71,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2499,
    endOffset: 2512,
    startLine: 72,
    endLine: 72,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2499,
    endOffset: 2512,
    startLine: 72,
    endLine: 72,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"aanduiding"',
    startOffset: 2482,
    endOffset: 2493,
    startLine: 71,
    endLine: 71,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"aanduiding"',
    startOffset: 2482,
    endOffset: 2493,
    startLine: 71,
    endLine: 71,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code die de locator uniek identificeert binnen de straat, administratieve eenheid etc."',
    startOffset: 2514,
    endOffset: 2615,
    startLine: 72,
    endLine: 72,
    startColumn: 18,
    endColumn: 119,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code die de locator uniek identificeert binnen de straat, administratieve eenheid etc."',
    startOffset: 2514,
    endOffset: 2615,
    startLine: 72,
    endLine: 72,
    startColumn: 18,
    endColumn: 119,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2495,
    endOffset: 2495,
    startLine: 71,
    endLine: 71,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2495,
    endOffset: 2495,
    startLine: 71,
    endLine: 71,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2617,
    endOffset: 2617,
    startLine: 72,
    endLine: 72,
    startColumn: 121,
    endColumn: 121,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2617,
    endOffset: 2617,
    startLine: 72,
    endLine: 72,
    startColumn: 121,
    endColumn: 121,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2678,
    endOffset: 2678,
    startLine: 73,
    endLine: 73,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2678,
    endOffset: 2678,
    startLine: 73,
    endLine: 73,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2747,
    endOffset: 2747,
    startLine: 74,
    endLine: 74,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2747,
    endOffset: 2747,
    startLine: 74,
    endLine: 74,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2621,
    endOffset: 2627,
    startLine: 73,
    endLine: 73,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2621,
    endOffset: 2627,
    startLine: 73,
    endLine: 73,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#aanduiding> ',
    startOffset: 2629,
    endOffset: 2677,
    startLine: 73,
    endLine: 73,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#aanduiding> ',
    startOffset: 2629,
    endOffset: 2677,
    startLine: 73,
    endLine: 73,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2682,
    endOffset: 2689,
    startLine: 74,
    endLine: 74,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2682,
    endOffset: 2689,
    startLine: 74,
    endLine: 74,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding> ',
    startOffset: 2691,
    endOffset: 2746,
    startLine: 74,
    endLine: 74,
    startColumn: 12,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding> ',
    startOffset: 2691,
    endOffset: 2746,
    startLine: 74,
    endLine: 74,
    startColumn: 12,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2750,
    endOffset: 2750,
    startLine: 75,
    endLine: 75,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 2750,
    endOffset: 2750,
    startLine: 75,
    endLine: 75,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 2755,
    endOffset: 2765,
    startLine: 76,
    endLine: 76,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 2755,
    endOffset: 2765,
    startLine: 76,
    endLine: 76,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2767,
    endOffset: 2767,
    startLine: 76,
    endLine: 76,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 2767,
    endOffset: 2767,
    startLine: 76,
    endLine: 76,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2771,
    endOffset: 2777,
    startLine: 77,
    endLine: 77,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 2771,
    endOffset: 2777,
    startLine: 77,
    endLine: 77,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2790,
    endOffset: 2803,
    startLine: 78,
    endLine: 78,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 2790,
    endOffset: 2803,
    startLine: 78,
    endLine: 78,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"naam"',
    startOffset: 2779,
    endOffset: 2784,
    startLine: 77,
    endLine: 77,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"naam"',
    startOffset: 2779,
    endOffset: 2784,
    startLine: 77,
    endLine: 77,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam of omschrijving vh het geografisch object dat de locator aanduidt."',
    startOffset: 2805,
    endOffset: 2877,
    startLine: 78,
    endLine: 78,
    startColumn: 18,
    endColumn: 90,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam of omschrijving vh het geografisch object dat de locator aanduidt."',
    startOffset: 2805,
    endOffset: 2877,
    startLine: 78,
    endLine: 78,
    startColumn: 18,
    endColumn: 90,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2786,
    endOffset: 2786,
    startLine: 77,
    endLine: 77,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2786,
    endOffset: 2786,
    startLine: 77,
    endLine: 77,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2879,
    endOffset: 2879,
    startLine: 78,
    endLine: 78,
    startColumn: 92,
    endColumn: 92,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2879,
    endOffset: 2879,
    startLine: 78,
    endLine: 78,
    startColumn: 92,
    endColumn: 92,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2934,
    endOffset: 2934,
    startLine: 79,
    endLine: 79,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2934,
    endOffset: 2934,
    startLine: 79,
    endLine: 79,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2997,
    endOffset: 2997,
    startLine: 80,
    endLine: 80,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2997,
    endOffset: 2997,
    startLine: 80,
    endLine: 80,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2883,
    endOffset: 2889,
    startLine: 79,
    endLine: 79,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 2883,
    endOffset: 2889,
    startLine: 79,
    endLine: 79,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#naam> ',
    startOffset: 2891,
    endOffset: 2933,
    startLine: 79,
    endLine: 79,
    startColumn: 11,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#naam> ',
    startOffset: 2891,
    endOffset: 2933,
    startLine: 79,
    endLine: 79,
    startColumn: 11,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2938,
    endOffset: 2945,
    startLine: 80,
    endLine: 80,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 2938,
    endOffset: 2945,
    startLine: 80,
    endLine: 80,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam> ',
    startOffset: 2947,
    endOffset: 2996,
    startLine: 80,
    endLine: 80,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam> ',
    startOffset: 2947,
    endOffset: 2996,
    startLine: 80,
    endLine: 80,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3000,
    endOffset: 3000,
    startLine: 81,
    endLine: 81,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3000,
    endOffset: 3000,
    startLine: 81,
    endLine: 81,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3005,
    endOffset: 3015,
    startLine: 82,
    endLine: 82,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3005,
    endOffset: 3015,
    startLine: 82,
    endLine: 82,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3017,
    endOffset: 3017,
    startLine: 82,
    endLine: 82,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3017,
    endOffset: 3017,
    startLine: 82,
    endLine: 82,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3021,
    endOffset: 3027,
    startLine: 83,
    endLine: 83,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3021,
    endOffset: 3027,
    startLine: 83,
    endLine: 83,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3042,
    endOffset: 3055,
    startLine: 84,
    endLine: 84,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3042,
    endOffset: 3055,
    startLine: 84,
    endLine: 84,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"niveau"',
    startOffset: 3029,
    endOffset: 3036,
    startLine: 83,
    endLine: 83,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"niveau"',
    startOffset: 3029,
    endOffset: 3036,
    startLine: 83,
    endLine: 83,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het niveau waarnaar de locator verwijst."',
    startOffset: 3057,
    endOffset: 3098,
    startLine: 84,
    endLine: 84,
    startColumn: 18,
    endColumn: 59,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het niveau waarnaar de locator verwijst."',
    startOffset: 3057,
    endOffset: 3098,
    startLine: 84,
    endLine: 84,
    startColumn: 18,
    endColumn: 59,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3038,
    endOffset: 3038,
    startLine: 83,
    endLine: 83,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3038,
    endOffset: 3038,
    startLine: 83,
    endLine: 83,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3100,
    endOffset: 3100,
    startLine: 84,
    endLine: 84,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3100,
    endOffset: 3100,
    startLine: 84,
    endLine: 84,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3157,
    endOffset: 3157,
    startLine: 85,
    endLine: 85,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3157,
    endOffset: 3157,
    startLine: 85,
    endLine: 85,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3216,
    endOffset: 3216,
    startLine: 86,
    endLine: 86,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3216,
    endOffset: 3216,
    startLine: 86,
    endLine: 86,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3234,
    endOffset: 3234,
    startLine: 87,
    endLine: 87,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3234,
    endOffset: 3234,
    startLine: 87,
    endLine: 87,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3252,
    endOffset: 3252,
    startLine: 88,
    endLine: 88,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3252,
    endOffset: 3252,
    startLine: 88,
    endLine: 88,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3104,
    endOffset: 3110,
    startLine: 85,
    endLine: 85,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3104,
    endOffset: 3110,
    startLine: 85,
    endLine: 85,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#niveau> ',
    startOffset: 3112,
    endOffset: 3156,
    startLine: 85,
    endLine: 85,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#niveau> ',
    startOffset: 3112,
    endOffset: 3156,
    startLine: 85,
    endLine: 85,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 3161,
    endOffset: 3168,
    startLine: 86,
    endLine: 86,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 3161,
    endOffset: 3168,
    startLine: 86,
    endLine: 86,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 3170,
    endOffset: 3215,
    startLine: 86,
    endLine: 86,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 3170,
    endOffset: 3215,
    startLine: 86,
    endLine: 86,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3220,
    endOffset: 3230,
    startLine: 87,
    endLine: 87,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3220,
    endOffset: 3230,
    startLine: 87,
    endLine: 87,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3232,
    endOffset: 3232,
    startLine: 87,
    endLine: 87,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3232,
    endOffset: 3232,
    startLine: 87,
    endLine: 87,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 3238,
    endOffset: 3248,
    startLine: 88,
    endLine: 88,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 3238,
    endOffset: 3248,
    startLine: 88,
    endLine: 88,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3250,
    endOffset: 3250,
    startLine: 88,
    endLine: 88,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3250,
    endOffset: 3250,
    startLine: 88,
    endLine: 88,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3255,
    endOffset: 3255,
    startLine: 89,
    endLine: 89,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3255,
    endOffset: 3255,
    startLine: 89,
    endLine: 89,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 3260,
    endOffset: 3268,
    startLine: 90,
    endLine: 90,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 3260,
    endOffset: 3268,
    startLine: 90,
    endLine: 90,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 3270,
    endOffset: 3274,
    startLine: 90,
    endLine: 90,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 3270,
    endOffset: 3274,
    startLine: 90,
    endLine: 90,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2386,
    endOffset: 2386,
    startLine: 68,
    endLine: 68,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2386,
    endOffset: 2386,
    startLine: 68,
    endLine: 68,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2455,
    endOffset: 2455,
    startLine: 69,
    endLine: 69,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2455,
    endOffset: 2455,
    startLine: 69,
    endLine: 69,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2752,
    endOffset: 2752,
    startLine: 75,
    endLine: 75,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 2752,
    endOffset: 2752,
    startLine: 75,
    endLine: 75,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3002,
    endOffset: 3002,
    startLine: 81,
    endLine: 81,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3002,
    endOffset: 3002,
    startLine: 81,
    endLine: 81,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3257,
    endOffset: 3257,
    startLine: 89,
    endLine: 89,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3257,
    endOffset: 3257,
    startLine: 89,
    endLine: 89,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 3276,
    endOffset: 3276,
    startLine: 90,
    endLine: 90,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 3276,
    endOffset: 3276,
    startLine: 90,
    endLine: 90,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LocatienaamShape>',
    startOffset: 3279,
    endOffset: 3343,
    startLine: 92,
    endLine: 92,
    startColumn: 1,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LocatienaamShape>',
    startOffset: 3279,
    endOffset: 3343,
    startLine: 92,
    endLine: 92,
    startColumn: 1,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 3346,
    endOffset: 3346,
    startLine: 93,
    endLine: 93,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 3346,
    endOffset: 3346,
    startLine: 93,
    endLine: 93,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 3348,
    endOffset: 3359,
    startLine: 93,
    endLine: 93,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 3348,
    endOffset: 3359,
    startLine: 93,
    endLine: 93,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 3364,
    endOffset: 3377,
    startLine: 94,
    endLine: 94,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 3364,
    endOffset: 3377,
    startLine: 94,
    endLine: 94,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam> ',
    startOffset: 3379,
    endOffset: 3428,
    startLine: 94,
    endLine: 94,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam> ',
    startOffset: 3379,
    endOffset: 3428,
    startLine: 94,
    endLine: 94,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3432,
    endOffset: 3442,
    startLine: 95,
    endLine: 95,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3432,
    endOffset: 3442,
    startLine: 95,
    endLine: 95,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3444,
    endOffset: 3444,
    startLine: 95,
    endLine: 95,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3444,
    endOffset: 3444,
    startLine: 95,
    endLine: 95,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3448,
    endOffset: 3454,
    startLine: 96,
    endLine: 96,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3448,
    endOffset: 3454,
    startLine: 96,
    endLine: 96,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3467,
    endOffset: 3480,
    startLine: 97,
    endLine: 97,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3467,
    endOffset: 3480,
    startLine: 97,
    endLine: 97,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"naam"',
    startOffset: 3456,
    endOffset: 3461,
    startLine: 96,
    endLine: 96,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"naam"',
    startOffset: 3456,
    endOffset: 3461,
    startLine: 96,
    endLine: 96,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vh geografisch object."',
    startOffset: 3482,
    endOffset: 3510,
    startLine: 97,
    endLine: 97,
    startColumn: 18,
    endColumn: 46,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vh geografisch object."',
    startOffset: 3482,
    endOffset: 3510,
    startLine: 97,
    endLine: 97,
    startColumn: 18,
    endColumn: 46,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3463,
    endOffset: 3463,
    startLine: 96,
    endLine: 96,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3463,
    endOffset: 3463,
    startLine: 96,
    endLine: 96,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3512,
    endOffset: 3512,
    startLine: 97,
    endLine: 97,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3512,
    endOffset: 3512,
    startLine: 97,
    endLine: 97,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3569,
    endOffset: 3569,
    startLine: 98,
    endLine: 98,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3569,
    endOffset: 3569,
    startLine: 98,
    endLine: 98,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3641,
    endOffset: 3641,
    startLine: 99,
    endLine: 99,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3641,
    endOffset: 3641,
    startLine: 99,
    endLine: 99,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3659,
    endOffset: 3659,
    startLine: 100,
    endLine: 100,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3659,
    endOffset: 3659,
    startLine: 100,
    endLine: 100,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3516,
    endOffset: 3522,
    startLine: 98,
    endLine: 98,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3516,
    endOffset: 3522,
    startLine: 98,
    endLine: 98,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 3524,
    endOffset: 3568,
    startLine: 98,
    endLine: 98,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 3524,
    endOffset: 3568,
    startLine: 98,
    endLine: 98,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 3573,
    endOffset: 3583,
    startLine: 99,
    endLine: 99,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 3573,
    endOffset: 3583,
    startLine: 99,
    endLine: 99,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 3585,
    endOffset: 3640,
    startLine: 99,
    endLine: 99,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 3585,
    endOffset: 3640,
    startLine: 99,
    endLine: 99,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3645,
    endOffset: 3655,
    startLine: 100,
    endLine: 100,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3645,
    endOffset: 3655,
    startLine: 100,
    endLine: 100,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3657,
    endOffset: 3657,
    startLine: 100,
    endLine: 100,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3657,
    endOffset: 3657,
    startLine: 100,
    endLine: 100,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3662,
    endOffset: 3662,
    startLine: 101,
    endLine: 101,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3662,
    endOffset: 3662,
    startLine: 101,
    endLine: 101,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3667,
    endOffset: 3677,
    startLine: 102,
    endLine: 102,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 3667,
    endOffset: 3677,
    startLine: 102,
    endLine: 102,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3679,
    endOffset: 3679,
    startLine: 102,
    endLine: 102,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 3679,
    endOffset: 3679,
    startLine: 102,
    endLine: 102,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3683,
    endOffset: 3689,
    startLine: 103,
    endLine: 103,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 3683,
    endOffset: 3689,
    startLine: 103,
    endLine: 103,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3702,
    endOffset: 3715,
    startLine: 104,
    endLine: 104,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 3702,
    endOffset: 3715,
    startLine: 104,
    endLine: 104,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"type"',
    startOffset: 3691,
    endOffset: 3696,
    startLine: 103,
    endLine: 103,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"type"',
    startOffset: 3691,
    endOffset: 3696,
    startLine: 103,
    endLine: 103,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Aard vh geografisch object."',
    startOffset: 3717,
    endOffset: 3745,
    startLine: 104,
    endLine: 104,
    startColumn: 18,
    endColumn: 46,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Aard vh geografisch object."',
    startOffset: 3717,
    endOffset: 3745,
    startLine: 104,
    endLine: 104,
    startColumn: 18,
    endColumn: 46,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3698,
    endOffset: 3698,
    startLine: 103,
    endLine: 103,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3698,
    endOffset: 3698,
    startLine: 103,
    endLine: 103,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3747,
    endOffset: 3747,
    startLine: 104,
    endLine: 104,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3747,
    endOffset: 3747,
    startLine: 104,
    endLine: 104,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3814,
    endOffset: 3814,
    startLine: 105,
    endLine: 105,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3814,
    endOffset: 3814,
    startLine: 105,
    endLine: 105,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3873,
    endOffset: 3873,
    startLine: 106,
    endLine: 106,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3873,
    endOffset: 3873,
    startLine: 106,
    endLine: 106,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3891,
    endOffset: 3891,
    startLine: 107,
    endLine: 107,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3891,
    endOffset: 3891,
    startLine: 107,
    endLine: 107,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3909,
    endOffset: 3909,
    startLine: 108,
    endLine: 108,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3909,
    endOffset: 3909,
    startLine: 108,
    endLine: 108,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3751,
    endOffset: 3757,
    startLine: 105,
    endLine: 105,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 3751,
    endOffset: 3757,
    startLine: 105,
    endLine: 105,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam.type> ',
    startOffset: 3759,
    endOffset: 3813,
    startLine: 105,
    endLine: 105,
    startColumn: 11,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatienaam.type> ',
    startOffset: 3759,
    endOffset: 3813,
    startLine: 105,
    endLine: 105,
    startColumn: 11,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 3818,
    endOffset: 3825,
    startLine: 106,
    endLine: 106,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 3818,
    endOffset: 3825,
    startLine: 106,
    endLine: 106,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 3827,
    endOffset: 3872,
    startLine: 106,
    endLine: 106,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 3827,
    endOffset: 3872,
    startLine: 106,
    endLine: 106,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3877,
    endOffset: 3887,
    startLine: 107,
    endLine: 107,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 3877,
    endOffset: 3887,
    startLine: 107,
    endLine: 107,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3889,
    endOffset: 3889,
    startLine: 107,
    endLine: 107,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3889,
    endOffset: 3889,
    startLine: 107,
    endLine: 107,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 3895,
    endOffset: 3905,
    startLine: 108,
    endLine: 108,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 3895,
    endOffset: 3905,
    startLine: 108,
    endLine: 108,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3907,
    endOffset: 3907,
    startLine: 108,
    endLine: 108,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 3907,
    endOffset: 3907,
    startLine: 108,
    endLine: 108,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3912,
    endOffset: 3912,
    startLine: 109,
    endLine: 109,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 3912,
    endOffset: 3912,
    startLine: 109,
    endLine: 109,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 3917,
    endOffset: 3925,
    startLine: 110,
    endLine: 110,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 3917,
    endOffset: 3925,
    startLine: 110,
    endLine: 110,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 3927,
    endOffset: 3931,
    startLine: 110,
    endLine: 110,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 3927,
    endOffset: 3931,
    startLine: 110,
    endLine: 110,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3361,
    endOffset: 3361,
    startLine: 93,
    endLine: 93,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3361,
    endOffset: 3361,
    startLine: 93,
    endLine: 93,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3429,
    endOffset: 3429,
    startLine: 94,
    endLine: 94,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3429,
    endOffset: 3429,
    startLine: 94,
    endLine: 94,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3664,
    endOffset: 3664,
    startLine: 101,
    endLine: 101,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3664,
    endOffset: 3664,
    startLine: 101,
    endLine: 101,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3914,
    endOffset: 3914,
    startLine: 109,
    endLine: 109,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 3914,
    endOffset: 3914,
    startLine: 109,
    endLine: 109,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 3933,
    endOffset: 3933,
    startLine: 110,
    endLine: 110,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 3933,
    endOffset: 3933,
    startLine: 110,
    endLine: 110,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LocatieaanduidingShape>',
    startOffset: 3936,
    endOffset: 4006,
    startLine: 112,
    endLine: 112,
    startColumn: 1,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LocatieaanduidingShape>',
    startOffset: 3936,
    endOffset: 4006,
    startLine: 112,
    endLine: 112,
    startColumn: 1,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 4009,
    endOffset: 4009,
    startLine: 113,
    endLine: 113,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 4009,
    endOffset: 4009,
    startLine: 113,
    endLine: 113,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 4011,
    endOffset: 4022,
    startLine: 113,
    endLine: 113,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 4011,
    endOffset: 4022,
    startLine: 113,
    endLine: 113,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 4027,
    endOffset: 4040,
    startLine: 114,
    endLine: 114,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 4027,
    endOffset: 4040,
    startLine: 114,
    endLine: 114,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding> ',
    startOffset: 4042,
    endOffset: 4097,
    startLine: 114,
    endLine: 114,
    startColumn: 17,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding> ',
    startOffset: 4042,
    endOffset: 4097,
    startLine: 114,
    endLine: 114,
    startColumn: 17,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 4101,
    endOffset: 4111,
    startLine: 115,
    endLine: 115,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 4101,
    endOffset: 4111,
    startLine: 115,
    endLine: 115,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4113,
    endOffset: 4113,
    startLine: 115,
    endLine: 115,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4113,
    endOffset: 4113,
    startLine: 115,
    endLine: 115,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4117,
    endOffset: 4123,
    startLine: 116,
    endLine: 116,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4117,
    endOffset: 4123,
    startLine: 116,
    endLine: 116,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4142,
    endOffset: 4155,
    startLine: 117,
    endLine: 117,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4142,
    endOffset: 4155,
    startLine: 117,
    endLine: 117,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"aanduiding"',
    startOffset: 4125,
    endOffset: 4136,
    startLine: 116,
    endLine: 116,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"aanduiding"',
    startOffset: 4125,
    endOffset: 4136,
    startLine: 116,
    endLine: 116,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code waarmee het identificerend deel van een adreslocator wordt aangeduid."',
    startOffset: 4157,
    endOffset: 4246,
    startLine: 117,
    endLine: 117,
    startColumn: 18,
    endColumn: 107,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code waarmee het identificerend deel van een adreslocator wordt aangeduid."',
    startOffset: 4157,
    endOffset: 4246,
    startLine: 117,
    endLine: 117,
    startColumn: 18,
    endColumn: 107,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4138,
    endOffset: 4138,
    startLine: 116,
    endLine: 116,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4138,
    endOffset: 4138,
    startLine: 116,
    endLine: 116,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4248,
    endOffset: 4248,
    startLine: 117,
    endLine: 117,
    startColumn: 109,
    endColumn: 109,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4248,
    endOffset: 4248,
    startLine: 117,
    endLine: 117,
    startColumn: 109,
    endColumn: 109,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4327,
    endOffset: 4327,
    startLine: 118,
    endLine: 118,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4327,
    endOffset: 4327,
    startLine: 118,
    endLine: 118,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4252,
    endOffset: 4258,
    startLine: 118,
    endLine: 118,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4252,
    endOffset: 4258,
    startLine: 118,
    endLine: 118,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding.aanduiding> ',
    startOffset: 4260,
    endOffset: 4326,
    startLine: 118,
    endLine: 118,
    startColumn: 11,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding.aanduiding> ',
    startOffset: 4260,
    endOffset: 4326,
    startLine: 118,
    endLine: 118,
    startColumn: 11,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 4331,
    endOffset: 4341,
    startLine: 119,
    endLine: 119,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 4331,
    endOffset: 4341,
    startLine: 119,
    endLine: 119,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 4343,
    endOffset: 4382,
    startLine: 119,
    endLine: 119,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 4343,
    endOffset: 4382,
    startLine: 119,
    endLine: 119,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 4389,
    endOffset: 4399,
    startLine: 120,
    endLine: 120,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 4389,
    endOffset: 4399,
    startLine: 120,
    endLine: 120,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4401,
    endOffset: 4401,
    startLine: 120,
    endLine: 120,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4401,
    endOffset: 4401,
    startLine: 120,
    endLine: 120,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 4407,
    endOffset: 4417,
    startLine: 121,
    endLine: 121,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 4407,
    endOffset: 4417,
    startLine: 121,
    endLine: 121,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4419,
    endOffset: 4419,
    startLine: 121,
    endLine: 121,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4419,
    endOffset: 4419,
    startLine: 121,
    endLine: 121,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4024,
    endOffset: 4024,
    startLine: 113,
    endLine: 113,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4024,
    endOffset: 4024,
    startLine: 113,
    endLine: 113,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4098,
    endOffset: 4098,
    startLine: 114,
    endLine: 114,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4098,
    endOffset: 4098,
    startLine: 114,
    endLine: 114,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4385,
    endOffset: 4385,
    startLine: 119,
    endLine: 119,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4385,
    endOffset: 4385,
    startLine: 119,
    endLine: 119,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4403,
    endOffset: 4403,
    startLine: 120,
    endLine: 120,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4403,
    endOffset: 4403,
    startLine: 120,
    endLine: 120,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4421,
    endOffset: 4421,
    startLine: 121,
    endLine: 121,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4421,
    endOffset: 4421,
    startLine: 121,
    endLine: 121,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4441,
    endOffset: 4441,
    startLine: 123,
    endLine: 123,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4441,
    endOffset: 4441,
    startLine: 123,
    endLine: 123,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4445,
    endOffset: 4451,
    startLine: 124,
    endLine: 124,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4445,
    endOffset: 4451,
    startLine: 124,
    endLine: 124,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4464,
    endOffset: 4477,
    startLine: 125,
    endLine: 125,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4464,
    endOffset: 4477,
    startLine: 125,
    endLine: 125,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"type"',
    startOffset: 4453,
    endOffset: 4458,
    startLine: 124,
    endLine: 124,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"type"',
    startOffset: 4453,
    endOffset: 4458,
    startLine: 124,
    endLine: 124,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Aard vd locatieaanduiding."',
    startOffset: 4479,
    endOffset: 4506,
    startLine: 125,
    endLine: 125,
    startColumn: 18,
    endColumn: 45,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Aard vd locatieaanduiding."',
    startOffset: 4479,
    endOffset: 4506,
    startLine: 125,
    endLine: 125,
    startColumn: 18,
    endColumn: 45,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4460,
    endOffset: 4460,
    startLine: 124,
    endLine: 124,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4460,
    endOffset: 4460,
    startLine: 124,
    endLine: 124,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4508,
    endOffset: 4508,
    startLine: 125,
    endLine: 125,
    startColumn: 47,
    endColumn: 47,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4508,
    endOffset: 4508,
    startLine: 125,
    endLine: 125,
    startColumn: 47,
    endColumn: 47,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4581,
    endOffset: 4581,
    startLine: 126,
    endLine: 126,
    startColumn: 72,
    endColumn: 72,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4581,
    endOffset: 4581,
    startLine: 126,
    endLine: 126,
    startColumn: 72,
    endColumn: 72,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4640,
    endOffset: 4640,
    startLine: 127,
    endLine: 127,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4640,
    endOffset: 4640,
    startLine: 127,
    endLine: 127,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4658,
    endOffset: 4658,
    startLine: 128,
    endLine: 128,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4658,
    endOffset: 4658,
    startLine: 128,
    endLine: 128,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4676,
    endOffset: 4676,
    startLine: 129,
    endLine: 129,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4676,
    endOffset: 4676,
    startLine: 129,
    endLine: 129,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4512,
    endOffset: 4518,
    startLine: 126,
    endLine: 126,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4512,
    endOffset: 4518,
    startLine: 126,
    endLine: 126,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding.type> ',
    startOffset: 4520,
    endOffset: 4580,
    startLine: 126,
    endLine: 126,
    startColumn: 11,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Locatieaanduiding.type> ',
    startOffset: 4520,
    endOffset: 4580,
    startLine: 126,
    endLine: 126,
    startColumn: 11,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 4585,
    endOffset: 4592,
    startLine: 127,
    endLine: 127,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 4585,
    endOffset: 4592,
    startLine: 127,
    endLine: 127,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 4594,
    endOffset: 4639,
    startLine: 127,
    endLine: 127,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 4594,
    endOffset: 4639,
    startLine: 127,
    endLine: 127,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 4644,
    endOffset: 4654,
    startLine: 128,
    endLine: 128,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 4644,
    endOffset: 4654,
    startLine: 128,
    endLine: 128,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4656,
    endOffset: 4656,
    startLine: 128,
    endLine: 128,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4656,
    endOffset: 4656,
    startLine: 128,
    endLine: 128,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 4662,
    endOffset: 4672,
    startLine: 129,
    endLine: 129,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 4662,
    endOffset: 4672,
    startLine: 129,
    endLine: 129,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4674,
    endOffset: 4674,
    startLine: 129,
    endLine: 129,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 4674,
    endOffset: 4674,
    startLine: 129,
    endLine: 129,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 4679,
    endOffset: 4679,
    startLine: 130,
    endLine: 130,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 4679,
    endOffset: 4679,
    startLine: 130,
    endLine: 130,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresvoorstellingShape>',
    startOffset: 4703,
    endOffset: 4773,
    startLine: 133,
    endLine: 133,
    startColumn: 1,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresvoorstellingShape>',
    startOffset: 4703,
    endOffset: 4773,
    startLine: 133,
    endLine: 133,
    startColumn: 1,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 4776,
    endOffset: 4776,
    startLine: 134,
    endLine: 134,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 4776,
    endOffset: 4776,
    startLine: 134,
    endLine: 134,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 4778,
    endOffset: 4789,
    startLine: 134,
    endLine: 134,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 4778,
    endOffset: 4789,
    startLine: 134,
    endLine: 134,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 4794,
    endOffset: 4807,
    startLine: 135,
    endLine: 135,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 4794,
    endOffset: 4807,
    startLine: 135,
    endLine: 135,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#Address> ',
    startOffset: 4809,
    endOffset: 4844,
    startLine: 135,
    endLine: 135,
    startColumn: 17,
    endColumn: 52,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#Address> ',
    startOffset: 4809,
    endOffset: 4844,
    startLine: 135,
    endLine: 135,
    startColumn: 17,
    endColumn: 52,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 4848,
    endOffset: 4858,
    startLine: 136,
    endLine: 136,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 4848,
    endOffset: 4858,
    startLine: 136,
    endLine: 136,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4860,
    endOffset: 4860,
    startLine: 136,
    endLine: 136,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 4860,
    endOffset: 4860,
    startLine: 136,
    endLine: 136,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4864,
    endOffset: 4870,
    startLine: 137,
    endLine: 137,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 4864,
    endOffset: 4870,
    startLine: 137,
    endLine: 137,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4891,
    endOffset: 4904,
    startLine: 138,
    endLine: 138,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 4891,
    endOffset: 4904,
    startLine: 138,
    endLine: 138,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"verwijstNaar"',
    startOffset: 4872,
    endOffset: 4885,
    startLine: 137,
    endLine: 137,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"verwijstNaar"',
    startOffset: 4872,
    endOffset: 4885,
    startLine: 137,
    endLine: 137,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Adres waarvan de adresvoorstelling is afgeleid."',
    startOffset: 4906,
    endOffset: 4954,
    startLine: 138,
    endLine: 138,
    startColumn: 18,
    endColumn: 66,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Adres waarvan de adresvoorstelling is afgeleid."',
    startOffset: 4906,
    endOffset: 4954,
    startLine: 138,
    endLine: 138,
    startColumn: 18,
    endColumn: 66,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4887,
    endOffset: 4887,
    startLine: 137,
    endLine: 137,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4887,
    endOffset: 4887,
    startLine: 137,
    endLine: 137,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4956,
    endOffset: 4956,
    startLine: 138,
    endLine: 138,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4956,
    endOffset: 4956,
    startLine: 138,
    endLine: 138,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5019,
    endOffset: 5019,
    startLine: 139,
    endLine: 139,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5019,
    endOffset: 5019,
    startLine: 139,
    endLine: 139,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5076,
    endOffset: 5076,
    startLine: 140,
    endLine: 140,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5076,
    endOffset: 5076,
    startLine: 140,
    endLine: 140,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5094,
    endOffset: 5094,
    startLine: 141,
    endLine: 141,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5094,
    endOffset: 5094,
    startLine: 141,
    endLine: 141,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4960,
    endOffset: 4966,
    startLine: 139,
    endLine: 139,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 4960,
    endOffset: 4966,
    startLine: 139,
    endLine: 139,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#verwijstNaar> ',
    startOffset: 4968,
    endOffset: 5018,
    startLine: 139,
    endLine: 139,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#verwijstNaar> ',
    startOffset: 4968,
    endOffset: 5018,
    startLine: 139,
    endLine: 139,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 5023,
    endOffset: 5030,
    startLine: 140,
    endLine: 140,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 5023,
    endOffset: 5030,
    startLine: 140,
    endLine: 140,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres> ',
    startOffset: 5032,
    endOffset: 5075,
    startLine: 140,
    endLine: 140,
    startColumn: 12,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres> ',
    startOffset: 5032,
    endOffset: 5075,
    startLine: 140,
    endLine: 140,
    startColumn: 12,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5080,
    endOffset: 5090,
    startLine: 141,
    endLine: 141,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5080,
    endOffset: 5090,
    startLine: 141,
    endLine: 141,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5092,
    endOffset: 5092,
    startLine: 141,
    endLine: 141,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5092,
    endOffset: 5092,
    startLine: 141,
    endLine: 141,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5097,
    endOffset: 5097,
    startLine: 142,
    endLine: 142,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5097,
    endOffset: 5097,
    startLine: 142,
    endLine: 142,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 5102,
    endOffset: 5112,
    startLine: 143,
    endLine: 143,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 5102,
    endOffset: 5112,
    startLine: 143,
    endLine: 143,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5114,
    endOffset: 5114,
    startLine: 143,
    endLine: 143,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5114,
    endOffset: 5114,
    startLine: 143,
    endLine: 143,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5118,
    endOffset: 5124,
    startLine: 144,
    endLine: 144,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5118,
    endOffset: 5124,
    startLine: 144,
    endLine: 144,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5146,
    endOffset: 5159,
    startLine: 145,
    endLine: 145,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5146,
    endOffset: 5159,
    startLine: 145,
    endLine: 145,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"volledigAdres"',
    startOffset: 5126,
    endOffset: 5140,
    startLine: 144,
    endLine: 144,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"volledigAdres"',
    startOffset: 5126,
    endOffset: 5140,
    startLine: 144,
    endLine: 144,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het complete adres in ├⌐├⌐n string, al dan niet geformatteerd."',
    startOffset: 5161,
    endOffset: 5222,
    startLine: 145,
    endLine: 145,
    startColumn: 18,
    endColumn: 79,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het complete adres in ├⌐├⌐n string, al dan niet geformatteerd."',
    startOffset: 5161,
    endOffset: 5222,
    startLine: 145,
    endLine: 145,
    startColumn: 18,
    endColumn: 79,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5142,
    endOffset: 5142,
    startLine: 144,
    endLine: 144,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5142,
    endOffset: 5142,
    startLine: 144,
    endLine: 144,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5224,
    endOffset: 5224,
    startLine: 145,
    endLine: 145,
    startColumn: 81,
    endColumn: 81,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5224,
    endOffset: 5224,
    startLine: 145,
    endLine: 145,
    startColumn: 81,
    endColumn: 81,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5276,
    endOffset: 5276,
    startLine: 146,
    endLine: 146,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5276,
    endOffset: 5276,
    startLine: 146,
    endLine: 146,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5348,
    endOffset: 5348,
    startLine: 147,
    endLine: 147,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5348,
    endOffset: 5348,
    startLine: 147,
    endLine: 147,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5366,
    endOffset: 5366,
    startLine: 148,
    endLine: 148,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5366,
    endOffset: 5366,
    startLine: 148,
    endLine: 148,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5228,
    endOffset: 5234,
    startLine: 146,
    endLine: 146,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5228,
    endOffset: 5234,
    startLine: 146,
    endLine: 146,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#fullAddress> ',
    startOffset: 5236,
    endOffset: 5275,
    startLine: 146,
    endLine: 146,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#fullAddress> ',
    startOffset: 5236,
    endOffset: 5275,
    startLine: 146,
    endLine: 146,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5280,
    endOffset: 5290,
    startLine: 147,
    endLine: 147,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5280,
    endOffset: 5290,
    startLine: 147,
    endLine: 147,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 5292,
    endOffset: 5347,
    startLine: 147,
    endLine: 147,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 5292,
    endOffset: 5347,
    startLine: 147,
    endLine: 147,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5352,
    endOffset: 5362,
    startLine: 148,
    endLine: 148,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5352,
    endOffset: 5362,
    startLine: 148,
    endLine: 148,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5364,
    endOffset: 5364,
    startLine: 148,
    endLine: 148,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5364,
    endOffset: 5364,
    startLine: 148,
    endLine: 148,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5369,
    endOffset: 5369,
    startLine: 149,
    endLine: 149,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5369,
    endOffset: 5369,
    startLine: 149,
    endLine: 149,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 5374,
    endOffset: 5384,
    startLine: 150,
    endLine: 150,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 5374,
    endOffset: 5384,
    startLine: 150,
    endLine: 150,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5386,
    endOffset: 5386,
    startLine: 150,
    endLine: 150,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5386,
    endOffset: 5386,
    startLine: 150,
    endLine: 150,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5390,
    endOffset: 5396,
    startLine: 151,
    endLine: 151,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5390,
    endOffset: 5396,
    startLine: 151,
    endLine: 151,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5412,
    endOffset: 5425,
    startLine: 152,
    endLine: 152,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5412,
    endOffset: 5425,
    startLine: 152,
    endLine: 152,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postbus"',
    startOffset: 5398,
    endOffset: 5406,
    startLine: 151,
    endLine: 151,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postbus"',
    startOffset: 5398,
    endOffset: 5406,
    startLine: 151,
    endLine: 151,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Postbusnummer in een postkantoor."',
    startOffset: 5427,
    endOffset: 5461,
    startLine: 152,
    endLine: 152,
    startColumn: 18,
    endColumn: 52,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Postbusnummer in een postkantoor."',
    startOffset: 5427,
    endOffset: 5461,
    startLine: 152,
    endLine: 152,
    startColumn: 18,
    endColumn: 52,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5408,
    endOffset: 5408,
    startLine: 151,
    endLine: 151,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5408,
    endOffset: 5408,
    startLine: 151,
    endLine: 151,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5463,
    endOffset: 5463,
    startLine: 152,
    endLine: 152,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5463,
    endOffset: 5463,
    startLine: 152,
    endLine: 152,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5509,
    endOffset: 5509,
    startLine: 153,
    endLine: 153,
    startColumn: 45,
    endColumn: 45,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5509,
    endOffset: 5509,
    startLine: 153,
    endLine: 153,
    startColumn: 45,
    endColumn: 45,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5467,
    endOffset: 5473,
    startLine: 153,
    endLine: 153,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5467,
    endOffset: 5473,
    startLine: 153,
    endLine: 153,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#poBox> ',
    startOffset: 5475,
    endOffset: 5508,
    startLine: 153,
    endLine: 153,
    startColumn: 11,
    endColumn: 44,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#poBox> ',
    startOffset: 5475,
    endOffset: 5508,
    startLine: 153,
    endLine: 153,
    startColumn: 11,
    endColumn: 44,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5513,
    endOffset: 5523,
    startLine: 154,
    endLine: 154,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5513,
    endOffset: 5523,
    startLine: 154,
    endLine: 154,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 5525,
    endOffset: 5564,
    startLine: 154,
    endLine: 154,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 5525,
    endOffset: 5564,
    startLine: 154,
    endLine: 154,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5571,
    endOffset: 5581,
    startLine: 155,
    endLine: 155,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5571,
    endOffset: 5581,
    startLine: 155,
    endLine: 155,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5583,
    endOffset: 5583,
    startLine: 155,
    endLine: 155,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5583,
    endOffset: 5583,
    startLine: 155,
    endLine: 155,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4791,
    endOffset: 4791,
    startLine: 134,
    endLine: 134,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4791,
    endOffset: 4791,
    startLine: 134,
    endLine: 134,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4845,
    endOffset: 4845,
    startLine: 135,
    endLine: 135,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 4845,
    endOffset: 4845,
    startLine: 135,
    endLine: 135,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5099,
    endOffset: 5099,
    startLine: 142,
    endLine: 142,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5099,
    endOffset: 5099,
    startLine: 142,
    endLine: 142,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5371,
    endOffset: 5371,
    startLine: 149,
    endLine: 149,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5371,
    endOffset: 5371,
    startLine: 149,
    endLine: 149,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5567,
    endOffset: 5567,
    startLine: 154,
    endLine: 154,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5567,
    endOffset: 5567,
    startLine: 154,
    endLine: 154,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5585,
    endOffset: 5585,
    startLine: 155,
    endLine: 155,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5585,
    endOffset: 5585,
    startLine: 155,
    endLine: 155,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5605,
    endOffset: 5605,
    startLine: 157,
    endLine: 157,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5605,
    endOffset: 5605,
    startLine: 157,
    endLine: 157,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5609,
    endOffset: 5615,
    startLine: 158,
    endLine: 158,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5609,
    endOffset: 5615,
    startLine: 158,
    endLine: 158,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5634,
    endOffset: 5647,
    startLine: 159,
    endLine: 159,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5634,
    endOffset: 5647,
    startLine: 159,
    endLine: 159,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"straatnaam"',
    startOffset: 5617,
    endOffset: 5628,
    startLine: 158,
    endLine: 158,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"straatnaam"',
    startOffset: 5617,
    endOffset: 5628,
    startLine: 158,
    endLine: 158,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Straatnaam vh adres."',
    startOffset: 5649,
    endOffset: 5670,
    startLine: 159,
    endLine: 159,
    startColumn: 18,
    endColumn: 39,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Straatnaam vh adres."',
    startOffset: 5649,
    endOffset: 5670,
    startLine: 159,
    endLine: 159,
    startColumn: 18,
    endColumn: 39,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5630,
    endOffset: 5630,
    startLine: 158,
    endLine: 158,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5630,
    endOffset: 5630,
    startLine: 158,
    endLine: 158,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5672,
    endOffset: 5672,
    startLine: 159,
    endLine: 159,
    startColumn: 41,
    endColumn: 41,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5672,
    endOffset: 5672,
    startLine: 159,
    endLine: 159,
    startColumn: 41,
    endColumn: 41,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5725,
    endOffset: 5725,
    startLine: 160,
    endLine: 160,
    startColumn: 52,
    endColumn: 52,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5725,
    endOffset: 5725,
    startLine: 160,
    endLine: 160,
    startColumn: 52,
    endColumn: 52,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5797,
    endOffset: 5797,
    startLine: 161,
    endLine: 161,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5797,
    endOffset: 5797,
    startLine: 161,
    endLine: 161,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5815,
    endOffset: 5815,
    startLine: 162,
    endLine: 162,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5815,
    endOffset: 5815,
    startLine: 162,
    endLine: 162,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5676,
    endOffset: 5682,
    startLine: 160,
    endLine: 160,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5676,
    endOffset: 5682,
    startLine: 160,
    endLine: 160,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#thoroughfare> ',
    startOffset: 5684,
    endOffset: 5724,
    startLine: 160,
    endLine: 160,
    startColumn: 11,
    endColumn: 51,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#thoroughfare> ',
    startOffset: 5684,
    endOffset: 5724,
    startLine: 160,
    endLine: 160,
    startColumn: 11,
    endColumn: 51,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5729,
    endOffset: 5739,
    startLine: 161,
    endLine: 161,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 5729,
    endOffset: 5739,
    startLine: 161,
    endLine: 161,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 5741,
    endOffset: 5796,
    startLine: 161,
    endLine: 161,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 5741,
    endOffset: 5796,
    startLine: 161,
    endLine: 161,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5801,
    endOffset: 5811,
    startLine: 162,
    endLine: 162,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 5801,
    endOffset: 5811,
    startLine: 162,
    endLine: 162,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5813,
    endOffset: 5813,
    startLine: 162,
    endLine: 162,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 5813,
    endOffset: 5813,
    startLine: 162,
    endLine: 162,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5818,
    endOffset: 5818,
    startLine: 163,
    endLine: 163,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 5818,
    endOffset: 5818,
    startLine: 163,
    endLine: 163,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5835,
    endOffset: 5835,
    startLine: 164,
    endLine: 164,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 5835,
    endOffset: 5835,
    startLine: 164,
    endLine: 164,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5839,
    endOffset: 5845,
    startLine: 165,
    endLine: 165,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 5839,
    endOffset: 5845,
    startLine: 165,
    endLine: 165,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5871,
    endOffset: 5884,
    startLine: 166,
    endLine: 166,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 5871,
    endOffset: 5884,
    startLine: 166,
    endLine: 166,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"locatieaanduiding"',
    startOffset: 5847,
    endOffset: 5865,
    startLine: 165,
    endLine: 165,
    startColumn: 11,
    endColumn: 29,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"locatieaanduiding"',
    startOffset: 5847,
    endOffset: 5865,
    startLine: 165,
    endLine: 165,
    startColumn: 11,
    endColumn: 29,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code die de adreslocator uniek identificeert binnen de straat, administratieve eenheid etc."',
    startOffset: 5886,
    endOffset: 5992,
    startLine: 166,
    endLine: 166,
    startColumn: 18,
    endColumn: 124,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code die de adreslocator uniek identificeert binnen de straat, administratieve eenheid etc."',
    startOffset: 5886,
    endOffset: 5992,
    startLine: 166,
    endLine: 166,
    startColumn: 18,
    endColumn: 124,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5867,
    endOffset: 5867,
    startLine: 165,
    endLine: 165,
    startColumn: 31,
    endColumn: 31,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5867,
    endOffset: 5867,
    startLine: 165,
    endLine: 165,
    startColumn: 31,
    endColumn: 31,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5994,
    endOffset: 5994,
    startLine: 166,
    endLine: 166,
    startColumn: 126,
    endColumn: 126,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 5994,
    endOffset: 5994,
    startLine: 166,
    endLine: 166,
    startColumn: 126,
    endColumn: 126,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6052,
    endOffset: 6052,
    startLine: 167,
    endLine: 167,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6052,
    endOffset: 6052,
    startLine: 167,
    endLine: 167,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5998,
    endOffset: 6004,
    startLine: 167,
    endLine: 167,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 5998,
    endOffset: 6004,
    startLine: 167,
    endLine: 167,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#locatorDesignator> ',
    startOffset: 6006,
    endOffset: 6051,
    startLine: 167,
    endLine: 167,
    startColumn: 11,
    endColumn: 56,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#locatorDesignator> ',
    startOffset: 6006,
    endOffset: 6051,
    startLine: 167,
    endLine: 167,
    startColumn: 11,
    endColumn: 56,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6056,
    endOffset: 6066,
    startLine: 168,
    endLine: 168,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6056,
    endOffset: 6066,
    startLine: 168,
    endLine: 168,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6068,
    endOffset: 6107,
    startLine: 168,
    endLine: 168,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6068,
    endOffset: 6107,
    startLine: 168,
    endLine: 168,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6130,
    endOffset: 6130,
    startLine: 170,
    endLine: 170,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6130,
    endOffset: 6130,
    startLine: 170,
    endLine: 170,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6134,
    endOffset: 6140,
    startLine: 171,
    endLine: 171,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6134,
    endOffset: 6140,
    startLine: 171,
    endLine: 171,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6159,
    endOffset: 6172,
    startLine: 172,
    endLine: 172,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6159,
    endOffset: 6172,
    startLine: 172,
    endLine: 172,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"huisnummer"',
    startOffset: 6142,
    endOffset: 6153,
    startLine: 171,
    endLine: 171,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"huisnummer"',
    startOffset: 6142,
    endOffset: 6153,
    startLine: 171,
    endLine: 171,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code officieel toegekend aan gebouweenheden, ligplaatsen, standplaatsen of percelen."',
    startOffset: 6174,
    endOffset: 6273,
    startLine: 172,
    endLine: 172,
    startColumn: 18,
    endColumn: 117,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code officieel toegekend aan gebouweenheden, ligplaatsen, standplaatsen of percelen."',
    startOffset: 6174,
    endOffset: 6273,
    startLine: 172,
    endLine: 172,
    startColumn: 18,
    endColumn: 117,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6155,
    endOffset: 6155,
    startLine: 171,
    endLine: 171,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6155,
    endOffset: 6155,
    startLine: 171,
    endLine: 171,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6275,
    endOffset: 6275,
    startLine: 172,
    endLine: 172,
    startColumn: 119,
    endColumn: 119,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6275,
    endOffset: 6275,
    startLine: 172,
    endLine: 172,
    startColumn: 119,
    endColumn: 119,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6354,
    endOffset: 6354,
    startLine: 173,
    endLine: 173,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6354,
    endOffset: 6354,
    startLine: 173,
    endLine: 173,
    startColumn: 78,
    endColumn: 78,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6279,
    endOffset: 6285,
    startLine: 173,
    endLine: 173,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6279,
    endOffset: 6285,
    startLine: 173,
    endLine: 173,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresvoorstelling.huisnummer> ',
    startOffset: 6287,
    endOffset: 6353,
    startLine: 173,
    endLine: 173,
    startColumn: 11,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresvoorstelling.huisnummer> ',
    startOffset: 6287,
    endOffset: 6353,
    startLine: 173,
    endLine: 173,
    startColumn: 11,
    endColumn: 77,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6358,
    endOffset: 6368,
    startLine: 174,
    endLine: 174,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6358,
    endOffset: 6368,
    startLine: 174,
    endLine: 174,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6370,
    endOffset: 6409,
    startLine: 174,
    endLine: 174,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6370,
    endOffset: 6409,
    startLine: 174,
    endLine: 174,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6450,
    endOffset: 6450,
    startLine: 177,
    endLine: 177,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6450,
    endOffset: 6450,
    startLine: 177,
    endLine: 177,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6454,
    endOffset: 6460,
    startLine: 178,
    endLine: 178,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6454,
    endOffset: 6460,
    startLine: 178,
    endLine: 178,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6478,
    endOffset: 6491,
    startLine: 179,
    endLine: 179,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6478,
    endOffset: 6491,
    startLine: 179,
    endLine: 179,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"busnummer"',
    startOffset: 6462,
    endOffset: 6472,
    startLine: 178,
    endLine: 178,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"busnummer"',
    startOffset: 6462,
    endOffset: 6472,
    startLine: 178,
    endLine: 178,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Officieel toegekende alfanumerieke code die wordt toegevoegd aan het huisnummer om meerdere gebouweenheden, standplaatsen, ligplaatsen of percelen te onderscheiden die eenzelfde huisnummer hebben."',
    startOffset: 6493,
    endOffset: 6690,
    startLine: 179,
    endLine: 179,
    startColumn: 18,
    endColumn: 215,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Officieel toegekende alfanumerieke code die wordt toegevoegd aan het huisnummer om meerdere gebouweenheden, standplaatsen, ligplaatsen of percelen te onderscheiden die eenzelfde huisnummer hebben."',
    startOffset: 6493,
    endOffset: 6690,
    startLine: 179,
    endLine: 179,
    startColumn: 18,
    endColumn: 215,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6474,
    endOffset: 6474,
    startLine: 178,
    endLine: 178,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6474,
    endOffset: 6474,
    startLine: 178,
    endLine: 178,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6692,
    endOffset: 6692,
    startLine: 179,
    endLine: 179,
    startColumn: 217,
    endColumn: 217,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6692,
    endOffset: 6692,
    startLine: 179,
    endLine: 179,
    startColumn: 217,
    endColumn: 217,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6770,
    endOffset: 6770,
    startLine: 180,
    endLine: 180,
    startColumn: 77,
    endColumn: 77,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6770,
    endOffset: 6770,
    startLine: 180,
    endLine: 180,
    startColumn: 77,
    endColumn: 77,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6696,
    endOffset: 6702,
    startLine: 180,
    endLine: 180,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6696,
    endOffset: 6702,
    startLine: 180,
    endLine: 180,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresvoorstelling.busnummer> ',
    startOffset: 6704,
    endOffset: 6769,
    startLine: 180,
    endLine: 180,
    startColumn: 11,
    endColumn: 76,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresvoorstelling.busnummer> ',
    startOffset: 6704,
    endOffset: 6769,
    startLine: 180,
    endLine: 180,
    startColumn: 11,
    endColumn: 76,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6774,
    endOffset: 6784,
    startLine: 181,
    endLine: 181,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 6774,
    endOffset: 6784,
    startLine: 181,
    endLine: 181,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6786,
    endOffset: 6825,
    startLine: 181,
    endLine: 181,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 6786,
    endOffset: 6825,
    startLine: 181,
    endLine: 181,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6866,
    endOffset: 6866,
    startLine: 184,
    endLine: 184,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 6866,
    endOffset: 6866,
    startLine: 184,
    endLine: 184,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6870,
    endOffset: 6876,
    startLine: 185,
    endLine: 185,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 6870,
    endOffset: 6876,
    startLine: 185,
    endLine: 185,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6896,
    endOffset: 6909,
    startLine: 186,
    endLine: 186,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 6896,
    endOffset: 6909,
    startLine: 186,
    endLine: 186,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"locatienaam"',
    startOffset: 6878,
    endOffset: 6890,
    startLine: 185,
    endLine: 185,
    startColumn: 11,
    endColumn: 23,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"locatienaam"',
    startOffset: 6878,
    endOffset: 6890,
    startLine: 185,
    endLine: 185,
    startColumn: 11,
    endColumn: 23,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam of omschrijving vh het geografisch object dat de adreslocator aanduidt."',
    startOffset: 6911,
    endOffset: 6988,
    startLine: 186,
    endLine: 186,
    startColumn: 18,
    endColumn: 95,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam of omschrijving vh het geografisch object dat de adreslocator aanduidt."',
    startOffset: 6911,
    endOffset: 6988,
    startLine: 186,
    endLine: 186,
    startColumn: 18,
    endColumn: 95,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6892,
    endOffset: 6892,
    startLine: 185,
    endLine: 185,
    startColumn: 25,
    endColumn: 25,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6892,
    endOffset: 6892,
    startLine: 185,
    endLine: 185,
    startColumn: 25,
    endColumn: 25,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6990,
    endOffset: 6990,
    startLine: 186,
    endLine: 186,
    startColumn: 97,
    endColumn: 97,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 6990,
    endOffset: 6990,
    startLine: 186,
    endLine: 186,
    startColumn: 97,
    endColumn: 97,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7042,
    endOffset: 7042,
    startLine: 187,
    endLine: 187,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7042,
    endOffset: 7042,
    startLine: 187,
    endLine: 187,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7114,
    endOffset: 7114,
    startLine: 188,
    endLine: 188,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7114,
    endOffset: 7114,
    startLine: 188,
    endLine: 188,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6994,
    endOffset: 7000,
    startLine: 187,
    endLine: 187,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 6994,
    endOffset: 7000,
    startLine: 187,
    endLine: 187,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#locatorName> ',
    startOffset: 7002,
    endOffset: 7041,
    startLine: 187,
    endLine: 187,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#locatorName> ',
    startOffset: 7002,
    endOffset: 7041,
    startLine: 187,
    endLine: 187,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7046,
    endOffset: 7056,
    startLine: 188,
    endLine: 188,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7046,
    endOffset: 7056,
    startLine: 188,
    endLine: 188,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7058,
    endOffset: 7113,
    startLine: 188,
    endLine: 188,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7058,
    endOffset: 7113,
    startLine: 188,
    endLine: 188,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7117,
    endOffset: 7117,
    startLine: 189,
    endLine: 189,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7117,
    endOffset: 7117,
    startLine: 189,
    endLine: 189,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7134,
    endOffset: 7134,
    startLine: 190,
    endLine: 190,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7134,
    endOffset: 7134,
    startLine: 190,
    endLine: 190,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7138,
    endOffset: 7144,
    startLine: 191,
    endLine: 191,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7138,
    endOffset: 7144,
    startLine: 191,
    endLine: 191,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7164,
    endOffset: 7177,
    startLine: 192,
    endLine: 192,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7164,
    endOffset: 7177,
    startLine: 192,
    endLine: 192,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adresgebied"',
    startOffset: 7146,
    endOffset: 7158,
    startLine: 191,
    endLine: 191,
    startColumn: 11,
    endColumn: 23,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adresgebied"',
    startOffset: 7146,
    endOffset: 7158,
    startLine: 191,
    endLine: 191,
    startColumn: 11,
    endColumn: 23,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam ve geografisch gebied of plaats die een aantal adresseerbare objecten groepeert om deze te adresseren zonder dat het gebied of de plaats een administratieve eenheid is"',
    startOffset: 7179,
    endOffset: 7352,
    startLine: 192,
    endLine: 192,
    startColumn: 18,
    endColumn: 191,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam ve geografisch gebied of plaats die een aantal adresseerbare objecten groepeert om deze te adresseren zonder dat het gebied of de plaats een administratieve eenheid is"',
    startOffset: 7179,
    endOffset: 7352,
    startLine: 192,
    endLine: 192,
    startColumn: 18,
    endColumn: 191,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7160,
    endOffset: 7160,
    startLine: 191,
    endLine: 191,
    startColumn: 25,
    endColumn: 25,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7160,
    endOffset: 7160,
    startLine: 191,
    endLine: 191,
    startColumn: 25,
    endColumn: 25,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7354,
    endOffset: 7354,
    startLine: 192,
    endLine: 192,
    startColumn: 193,
    endColumn: 193,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7354,
    endOffset: 7354,
    startLine: 192,
    endLine: 192,
    startColumn: 193,
    endColumn: 193,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7406,
    endOffset: 7406,
    startLine: 193,
    endLine: 193,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7406,
    endOffset: 7406,
    startLine: 193,
    endLine: 193,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7478,
    endOffset: 7478,
    startLine: 194,
    endLine: 194,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7478,
    endOffset: 7478,
    startLine: 194,
    endLine: 194,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7496,
    endOffset: 7496,
    startLine: 195,
    endLine: 195,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7496,
    endOffset: 7496,
    startLine: 195,
    endLine: 195,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7358,
    endOffset: 7364,
    startLine: 193,
    endLine: 193,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7358,
    endOffset: 7364,
    startLine: 193,
    endLine: 193,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#addressArea> ',
    startOffset: 7366,
    endOffset: 7405,
    startLine: 193,
    endLine: 193,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#addressArea> ',
    startOffset: 7366,
    endOffset: 7405,
    startLine: 193,
    endLine: 193,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7410,
    endOffset: 7420,
    startLine: 194,
    endLine: 194,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7410,
    endOffset: 7420,
    startLine: 194,
    endLine: 194,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7422,
    endOffset: 7477,
    startLine: 194,
    endLine: 194,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7422,
    endOffset: 7477,
    startLine: 194,
    endLine: 194,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 7482,
    endOffset: 7492,
    startLine: 195,
    endLine: 195,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 7482,
    endOffset: 7492,
    startLine: 195,
    endLine: 195,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 7494,
    endOffset: 7494,
    startLine: 195,
    endLine: 195,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 7494,
    endOffset: 7494,
    startLine: 195,
    endLine: 195,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7499,
    endOffset: 7499,
    startLine: 196,
    endLine: 196,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7499,
    endOffset: 7499,
    startLine: 196,
    endLine: 196,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7516,
    endOffset: 7516,
    startLine: 197,
    endLine: 197,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7516,
    endOffset: 7516,
    startLine: 197,
    endLine: 197,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7520,
    endOffset: 7526,
    startLine: 198,
    endLine: 198,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7520,
    endOffset: 7526,
    startLine: 198,
    endLine: 198,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7543,
    endOffset: 7556,
    startLine: 199,
    endLine: 199,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7543,
    endOffset: 7556,
    startLine: 199,
    endLine: 199,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postnaam"',
    startOffset: 7528,
    endOffset: 7537,
    startLine: 198,
    endLine: 198,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postnaam"',
    startOffset: 7528,
    endOffset: 7537,
    startLine: 198,
    endLine: 198,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam waarmee het geografisch gebied dat adressen voor postale doeleinden groepeert wordt aangeduid."',
    startOffset: 7558,
    endOffset: 7658,
    startLine: 199,
    endLine: 199,
    startColumn: 18,
    endColumn: 118,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam waarmee het geografisch gebied dat adressen voor postale doeleinden groepeert wordt aangeduid."',
    startOffset: 7558,
    endOffset: 7658,
    startLine: 199,
    endLine: 199,
    startColumn: 18,
    endColumn: 118,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7539,
    endOffset: 7539,
    startLine: 198,
    endLine: 198,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7539,
    endOffset: 7539,
    startLine: 198,
    endLine: 198,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7660,
    endOffset: 7660,
    startLine: 199,
    endLine: 199,
    startColumn: 120,
    endColumn: 120,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7660,
    endOffset: 7660,
    startLine: 199,
    endLine: 199,
    startColumn: 120,
    endColumn: 120,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7709,
    endOffset: 7709,
    startLine: 200,
    endLine: 200,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7709,
    endOffset: 7709,
    startLine: 200,
    endLine: 200,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7781,
    endOffset: 7781,
    startLine: 201,
    endLine: 201,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7781,
    endOffset: 7781,
    startLine: 201,
    endLine: 201,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7799,
    endOffset: 7799,
    startLine: 202,
    endLine: 202,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7799,
    endOffset: 7799,
    startLine: 202,
    endLine: 202,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7664,
    endOffset: 7670,
    startLine: 200,
    endLine: 200,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7664,
    endOffset: 7670,
    startLine: 200,
    endLine: 200,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#postName> ',
    startOffset: 7672,
    endOffset: 7708,
    startLine: 200,
    endLine: 200,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#postName> ',
    startOffset: 7672,
    endOffset: 7708,
    startLine: 200,
    endLine: 200,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7713,
    endOffset: 7723,
    startLine: 201,
    endLine: 201,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7713,
    endOffset: 7723,
    startLine: 201,
    endLine: 201,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7725,
    endOffset: 7780,
    startLine: 201,
    endLine: 201,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7725,
    endOffset: 7780,
    startLine: 201,
    endLine: 201,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 7785,
    endOffset: 7795,
    startLine: 202,
    endLine: 202,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 7785,
    endOffset: 7795,
    startLine: 202,
    endLine: 202,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 7797,
    endOffset: 7797,
    startLine: 202,
    endLine: 202,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 7797,
    endOffset: 7797,
    startLine: 202,
    endLine: 202,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7802,
    endOffset: 7802,
    startLine: 203,
    endLine: 203,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 7802,
    endOffset: 7802,
    startLine: 203,
    endLine: 203,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7819,
    endOffset: 7819,
    startLine: 204,
    endLine: 204,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 7819,
    endOffset: 7819,
    startLine: 204,
    endLine: 204,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7823,
    endOffset: 7829,
    startLine: 205,
    endLine: 205,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 7823,
    endOffset: 7829,
    startLine: 205,
    endLine: 205,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7850,
    endOffset: 7863,
    startLine: 206,
    endLine: 206,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 7850,
    endOffset: 7863,
    startLine: 206,
    endLine: 206,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"gemeentenaam"',
    startOffset: 7831,
    endOffset: 7844,
    startLine: 205,
    endLine: 205,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"gemeentenaam"',
    startOffset: 7831,
    endOffset: 7844,
    startLine: 205,
    endLine: 205,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeentenaam vh adres."',
    startOffset: 7865,
    endOffset: 7888,
    startLine: 206,
    endLine: 206,
    startColumn: 18,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeentenaam vh adres."',
    startOffset: 7865,
    endOffset: 7888,
    startLine: 206,
    endLine: 206,
    startColumn: 18,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7846,
    endOffset: 7846,
    startLine: 205,
    endLine: 205,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7846,
    endOffset: 7846,
    startLine: 205,
    endLine: 205,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7890,
    endOffset: 7890,
    startLine: 206,
    endLine: 206,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7890,
    endOffset: 7890,
    startLine: 206,
    endLine: 206,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7953,
    endOffset: 7953,
    startLine: 207,
    endLine: 207,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 7953,
    endOffset: 7953,
    startLine: 207,
    endLine: 207,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8025,
    endOffset: 8025,
    startLine: 208,
    endLine: 208,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8025,
    endOffset: 8025,
    startLine: 208,
    endLine: 208,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8043,
    endOffset: 8043,
    startLine: 209,
    endLine: 209,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8043,
    endOffset: 8043,
    startLine: 209,
    endLine: 209,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7894,
    endOffset: 7900,
    startLine: 207,
    endLine: 207,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 7894,
    endOffset: 7900,
    startLine: 207,
    endLine: 207,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#gemeentenaam> ',
    startOffset: 7902,
    endOffset: 7952,
    startLine: 207,
    endLine: 207,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#gemeentenaam> ',
    startOffset: 7902,
    endOffset: 7952,
    startLine: 207,
    endLine: 207,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7957,
    endOffset: 7967,
    startLine: 208,
    endLine: 208,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 7957,
    endOffset: 7967,
    startLine: 208,
    endLine: 208,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7969,
    endOffset: 8024,
    startLine: 208,
    endLine: 208,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 7969,
    endOffset: 8024,
    startLine: 208,
    endLine: 208,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8029,
    endOffset: 8039,
    startLine: 209,
    endLine: 209,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8029,
    endOffset: 8039,
    startLine: 209,
    endLine: 209,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8041,
    endOffset: 8041,
    startLine: 209,
    endLine: 209,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8041,
    endOffset: 8041,
    startLine: 209,
    endLine: 209,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8046,
    endOffset: 8046,
    startLine: 210,
    endLine: 210,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8046,
    endOffset: 8046,
    startLine: 210,
    endLine: 210,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8063,
    endOffset: 8063,
    startLine: 211,
    endLine: 211,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8063,
    endOffset: 8063,
    startLine: 211,
    endLine: 211,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8067,
    endOffset: 8073,
    startLine: 212,
    endLine: 212,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8067,
    endOffset: 8073,
    startLine: 212,
    endLine: 212,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8111,
    endOffset: 8124,
    startLine: 213,
    endLine: 213,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8111,
    endOffset: 8124,
    startLine: 213,
    endLine: 213,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"administratieveEenheidNiveau2"',
    startOffset: 8075,
    endOffset: 8105,
    startLine: 212,
    endLine: 212,
    startColumn: 11,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"administratieveEenheidNiveau2"',
    startOffset: 8075,
    endOffset: 8105,
    startLine: 212,
    endLine: 212,
    startColumn: 11,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De regio vh adres, doorgaans een provincie of deelstaat of gelijkaardig gebied dat typisch meerdere plaatsen omvat."',
    startOffset: 8126,
    endOffset: 8242,
    startLine: 213,
    endLine: 213,
    startColumn: 18,
    endColumn: 134,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"De regio vh adres, doorgaans een provincie of deelstaat of gelijkaardig gebied dat typisch meerdere plaatsen omvat."',
    startOffset: 8126,
    endOffset: 8242,
    startLine: 213,
    endLine: 213,
    startColumn: 18,
    endColumn: 134,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8107,
    endOffset: 8107,
    startLine: 212,
    endLine: 212,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8107,
    endOffset: 8107,
    startLine: 212,
    endLine: 212,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8244,
    endOffset: 8244,
    startLine: 213,
    endLine: 213,
    startColumn: 136,
    endColumn: 136,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8244,
    endOffset: 8244,
    startLine: 213,
    endLine: 213,
    startColumn: 136,
    endColumn: 136,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8296,
    endOffset: 8296,
    startLine: 214,
    endLine: 214,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8296,
    endOffset: 8296,
    startLine: 214,
    endLine: 214,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8368,
    endOffset: 8368,
    startLine: 215,
    endLine: 215,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8368,
    endOffset: 8368,
    startLine: 215,
    endLine: 215,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8386,
    endOffset: 8386,
    startLine: 216,
    endLine: 216,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8386,
    endOffset: 8386,
    startLine: 216,
    endLine: 216,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8248,
    endOffset: 8254,
    startLine: 214,
    endLine: 214,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8248,
    endOffset: 8254,
    startLine: 214,
    endLine: 214,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#adminUnitL2> ',
    startOffset: 8256,
    endOffset: 8295,
    startLine: 214,
    endLine: 214,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#adminUnitL2> ',
    startOffset: 8256,
    endOffset: 8295,
    startLine: 214,
    endLine: 214,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8300,
    endOffset: 8310,
    startLine: 215,
    endLine: 215,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8300,
    endOffset: 8310,
    startLine: 215,
    endLine: 215,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8312,
    endOffset: 8367,
    startLine: 215,
    endLine: 215,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8312,
    endOffset: 8367,
    startLine: 215,
    endLine: 215,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8372,
    endOffset: 8382,
    startLine: 216,
    endLine: 216,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8372,
    endOffset: 8382,
    startLine: 216,
    endLine: 216,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8384,
    endOffset: 8384,
    startLine: 216,
    endLine: 216,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8384,
    endOffset: 8384,
    startLine: 216,
    endLine: 216,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8389,
    endOffset: 8389,
    startLine: 217,
    endLine: 217,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8389,
    endOffset: 8389,
    startLine: 217,
    endLine: 217,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8406,
    endOffset: 8406,
    startLine: 218,
    endLine: 218,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8406,
    endOffset: 8406,
    startLine: 218,
    endLine: 218,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8410,
    endOffset: 8416,
    startLine: 219,
    endLine: 219,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8410,
    endOffset: 8416,
    startLine: 219,
    endLine: 219,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8454,
    endOffset: 8467,
    startLine: 220,
    endLine: 220,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8454,
    endOffset: 8467,
    startLine: 220,
    endLine: 220,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"administratieveEenheidNiveau1"',
    startOffset: 8418,
    endOffset: 8448,
    startLine: 219,
    endLine: 219,
    startColumn: 11,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"administratieveEenheidNiveau1"',
    startOffset: 8418,
    endOffset: 8448,
    startLine: 219,
    endLine: 219,
    startColumn: 11,
    endColumn: 41,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Hoogste Administratieve eenheid vh adres, doorgaans een land."',
    startOffset: 8469,
    endOffset: 8531,
    startLine: 220,
    endLine: 220,
    startColumn: 18,
    endColumn: 80,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Hoogste Administratieve eenheid vh adres, doorgaans een land."',
    startOffset: 8469,
    endOffset: 8531,
    startLine: 220,
    endLine: 220,
    startColumn: 18,
    endColumn: 80,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8450,
    endOffset: 8450,
    startLine: 219,
    endLine: 219,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8450,
    endOffset: 8450,
    startLine: 219,
    endLine: 219,
    startColumn: 43,
    endColumn: 43,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8533,
    endOffset: 8533,
    startLine: 220,
    endLine: 220,
    startColumn: 82,
    endColumn: 82,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8533,
    endOffset: 8533,
    startLine: 220,
    endLine: 220,
    startColumn: 82,
    endColumn: 82,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8585,
    endOffset: 8585,
    startLine: 221,
    endLine: 221,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8585,
    endOffset: 8585,
    startLine: 221,
    endLine: 221,
    startColumn: 51,
    endColumn: 51,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8657,
    endOffset: 8657,
    startLine: 222,
    endLine: 222,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8657,
    endOffset: 8657,
    startLine: 222,
    endLine: 222,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8675,
    endOffset: 8675,
    startLine: 223,
    endLine: 223,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8675,
    endOffset: 8675,
    startLine: 223,
    endLine: 223,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8537,
    endOffset: 8543,
    startLine: 221,
    endLine: 221,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8537,
    endOffset: 8543,
    startLine: 221,
    endLine: 221,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#adminUnitL1> ',
    startOffset: 8545,
    endOffset: 8584,
    startLine: 221,
    endLine: 221,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#adminUnitL1> ',
    startOffset: 8545,
    endOffset: 8584,
    startLine: 221,
    endLine: 221,
    startColumn: 11,
    endColumn: 50,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8589,
    endOffset: 8599,
    startLine: 222,
    endLine: 222,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8589,
    endOffset: 8599,
    startLine: 222,
    endLine: 222,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8601,
    endOffset: 8656,
    startLine: 222,
    endLine: 222,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8601,
    endOffset: 8656,
    startLine: 222,
    endLine: 222,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8661,
    endOffset: 8671,
    startLine: 223,
    endLine: 223,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8661,
    endOffset: 8671,
    startLine: 223,
    endLine: 223,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8673,
    endOffset: 8673,
    startLine: 223,
    endLine: 223,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8673,
    endOffset: 8673,
    startLine: 223,
    endLine: 223,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8678,
    endOffset: 8678,
    startLine: 224,
    endLine: 224,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8678,
    endOffset: 8678,
    startLine: 224,
    endLine: 224,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8695,
    endOffset: 8695,
    startLine: 225,
    endLine: 225,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8695,
    endOffset: 8695,
    startLine: 225,
    endLine: 225,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8699,
    endOffset: 8705,
    startLine: 226,
    endLine: 226,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8699,
    endOffset: 8705,
    startLine: 226,
    endLine: 226,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8718,
    endOffset: 8731,
    startLine: 227,
    endLine: 227,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8718,
    endOffset: 8731,
    startLine: 227,
    endLine: 227,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"land"',
    startOffset: 8707,
    endOffset: 8712,
    startLine: 226,
    endLine: 226,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"land"',
    startOffset: 8707,
    endOffset: 8712,
    startLine: 226,
    endLine: 226,
    startColumn: 11,
    endColumn: 16,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Land waarin het adres gelegen is."',
    startOffset: 8733,
    endOffset: 8767,
    startLine: 227,
    endLine: 227,
    startColumn: 18,
    endColumn: 52,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Land waarin het adres gelegen is."',
    startOffset: 8733,
    endOffset: 8767,
    startLine: 227,
    endLine: 227,
    startColumn: 18,
    endColumn: 52,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8714,
    endOffset: 8714,
    startLine: 226,
    endLine: 226,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8714,
    endOffset: 8714,
    startLine: 226,
    endLine: 226,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8769,
    endOffset: 8769,
    startLine: 227,
    endLine: 227,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8769,
    endOffset: 8769,
    startLine: 227,
    endLine: 227,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8824,
    endOffset: 8824,
    startLine: 228,
    endLine: 228,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8824,
    endOffset: 8824,
    startLine: 228,
    endLine: 228,
    startColumn: 54,
    endColumn: 54,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8896,
    endOffset: 8896,
    startLine: 229,
    endLine: 229,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8896,
    endOffset: 8896,
    startLine: 229,
    endLine: 229,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8914,
    endOffset: 8914,
    startLine: 230,
    endLine: 230,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8914,
    endOffset: 8914,
    startLine: 230,
    endLine: 230,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8773,
    endOffset: 8779,
    startLine: 228,
    endLine: 228,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 8773,
    endOffset: 8779,
    startLine: 228,
    endLine: 228,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#land> ',
    startOffset: 8781,
    endOffset: 8823,
    startLine: 228,
    endLine: 228,
    startColumn: 11,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#land> ',
    startOffset: 8781,
    endOffset: 8823,
    startLine: 228,
    endLine: 228,
    startColumn: 11,
    endColumn: 53,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8828,
    endOffset: 8838,
    startLine: 229,
    endLine: 229,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 8828,
    endOffset: 8838,
    startLine: 229,
    endLine: 229,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8840,
    endOffset: 8895,
    startLine: 229,
    endLine: 229,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 8840,
    endOffset: 8895,
    startLine: 229,
    endLine: 229,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8900,
    endOffset: 8910,
    startLine: 230,
    endLine: 230,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 8900,
    endOffset: 8910,
    startLine: 230,
    endLine: 230,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8912,
    endOffset: 8912,
    startLine: 230,
    endLine: 230,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 8912,
    endOffset: 8912,
    startLine: 230,
    endLine: 230,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8917,
    endOffset: 8917,
    startLine: 231,
    endLine: 231,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 8917,
    endOffset: 8917,
    startLine: 231,
    endLine: 231,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8934,
    endOffset: 8934,
    startLine: 232,
    endLine: 232,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 8934,
    endOffset: 8934,
    startLine: 232,
    endLine: 232,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8938,
    endOffset: 8944,
    startLine: 233,
    endLine: 233,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 8938,
    endOffset: 8944,
    startLine: 233,
    endLine: 233,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8961,
    endOffset: 8974,
    startLine: 234,
    endLine: 234,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 8961,
    endOffset: 8974,
    startLine: 234,
    endLine: 234,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postcode"',
    startOffset: 8946,
    endOffset: 8955,
    startLine: 233,
    endLine: 233,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postcode"',
    startOffset: 8946,
    endOffset: 8955,
    startLine: 233,
    endLine: 233,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Code waarmee het geografisch gebied dat adressen voor postale doeleinden groepeert wordt aangeduid."',
    startOffset: 8976,
    endOffset: 9076,
    startLine: 234,
    endLine: 234,
    startColumn: 18,
    endColumn: 118,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Code waarmee het geografisch gebied dat adressen voor postale doeleinden groepeert wordt aangeduid."',
    startOffset: 8976,
    endOffset: 9076,
    startLine: 234,
    endLine: 234,
    startColumn: 18,
    endColumn: 118,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8957,
    endOffset: 8957,
    startLine: 233,
    endLine: 233,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 8957,
    endOffset: 8957,
    startLine: 233,
    endLine: 233,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9078,
    endOffset: 9078,
    startLine: 234,
    endLine: 234,
    startColumn: 120,
    endColumn: 120,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9078,
    endOffset: 9078,
    startLine: 234,
    endLine: 234,
    startColumn: 120,
    endColumn: 120,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9127,
    endOffset: 9127,
    startLine: 235,
    endLine: 235,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9127,
    endOffset: 9127,
    startLine: 235,
    endLine: 235,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9082,
    endOffset: 9088,
    startLine: 235,
    endLine: 235,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9082,
    endOffset: 9088,
    startLine: 235,
    endLine: 235,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#postCode> ',
    startOffset: 9090,
    endOffset: 9126,
    startLine: 235,
    endLine: 235,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/locn#postCode> ',
    startOffset: 9090,
    endOffset: 9126,
    startLine: 235,
    endLine: 235,
    startColumn: 11,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 9131,
    endOffset: 9141,
    startLine: 236,
    endLine: 236,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 9131,
    endOffset: 9141,
    startLine: 236,
    endLine: 236,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 9143,
    endOffset: 9182,
    startLine: 236,
    endLine: 236,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 9143,
    endOffset: 9182,
    startLine: 236,
    endLine: 236,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 9227,
    endOffset: 9227,
    startLine: 239,
    endLine: 239,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 9227,
    endOffset: 9227,
    startLine: 239,
    endLine: 239,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GemeentenaamShape>',
    startOffset: 9230,
    endOffset: 9295,
    startLine: 241,
    endLine: 241,
    startColumn: 1,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#GemeentenaamShape>',
    startOffset: 9230,
    endOffset: 9295,
    startLine: 241,
    endLine: 241,
    startColumn: 1,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 9298,
    endOffset: 9298,
    startLine: 242,
    endLine: 242,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 9298,
    endOffset: 9298,
    startLine: 242,
    endLine: 242,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 9300,
    endOffset: 9311,
    startLine: 242,
    endLine: 242,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 9300,
    endOffset: 9311,
    startLine: 242,
    endLine: 242,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 9316,
    endOffset: 9329,
    startLine: 243,
    endLine: 243,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 9316,
    endOffset: 9329,
    startLine: 243,
    endLine: 243,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Gemeentenaam> ',
    startOffset: 9331,
    endOffset: 9381,
    startLine: 243,
    endLine: 243,
    startColumn: 17,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Gemeentenaam> ',
    startOffset: 9331,
    endOffset: 9381,
    startLine: 243,
    endLine: 243,
    startColumn: 17,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 9385,
    endOffset: 9395,
    startLine: 244,
    endLine: 244,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 9385,
    endOffset: 9395,
    startLine: 244,
    endLine: 244,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 9397,
    endOffset: 9397,
    startLine: 244,
    endLine: 244,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 9397,
    endOffset: 9397,
    startLine: 244,
    endLine: 244,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 9401,
    endOffset: 9407,
    startLine: 245,
    endLine: 245,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 9401,
    endOffset: 9407,
    startLine: 245,
    endLine: 245,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 9429,
    endOffset: 9442,
    startLine: 246,
    endLine: 246,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 9429,
    endOffset: 9442,
    startLine: 246,
    endLine: 246,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isAfgeleidVan"',
    startOffset: 9409,
    endOffset: 9423,
    startLine: 245,
    endLine: 245,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isAfgeleidVan"',
    startOffset: 9409,
    endOffset: 9423,
    startLine: 245,
    endLine: 245,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeente waarvan de gemeentenaam is afgeleid."',
    startOffset: 9444,
    endOffset: 9490,
    startLine: 246,
    endLine: 246,
    startColumn: 18,
    endColumn: 64,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeente waarvan de gemeentenaam is afgeleid."',
    startOffset: 9444,
    endOffset: 9490,
    startLine: 246,
    endLine: 246,
    startColumn: 18,
    endColumn: 64,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9425,
    endOffset: 9425,
    startLine: 245,
    endLine: 245,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9425,
    endOffset: 9425,
    startLine: 245,
    endLine: 245,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9492,
    endOffset: 9492,
    startLine: 246,
    endLine: 246,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9492,
    endOffset: 9492,
    startLine: 246,
    endLine: 246,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9556,
    endOffset: 9556,
    startLine: 247,
    endLine: 247,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9556,
    endOffset: 9556,
    startLine: 247,
    endLine: 247,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9619,
    endOffset: 9619,
    startLine: 248,
    endLine: 248,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9619,
    endOffset: 9619,
    startLine: 248,
    endLine: 248,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9637,
    endOffset: 9637,
    startLine: 249,
    endLine: 249,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9637,
    endOffset: 9637,
    startLine: 249,
    endLine: 249,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9655,
    endOffset: 9655,
    startLine: 250,
    endLine: 250,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9655,
    endOffset: 9655,
    startLine: 250,
    endLine: 250,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9496,
    endOffset: 9502,
    startLine: 247,
    endLine: 247,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9496,
    endOffset: 9502,
    startLine: 247,
    endLine: 247,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isAfgeleidVan> ',
    startOffset: 9504,
    endOffset: 9555,
    startLine: 247,
    endLine: 247,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isAfgeleidVan> ',
    startOffset: 9504,
    endOffset: 9555,
    startLine: 247,
    endLine: 247,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 9560,
    endOffset: 9567,
    startLine: 248,
    endLine: 248,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 9560,
    endOffset: 9567,
    startLine: 248,
    endLine: 248,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 9569,
    endOffset: 9618,
    startLine: 248,
    endLine: 248,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 9569,
    endOffset: 9618,
    startLine: 248,
    endLine: 248,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 9623,
    endOffset: 9633,
    startLine: 249,
    endLine: 249,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 9623,
    endOffset: 9633,
    startLine: 249,
    endLine: 249,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9635,
    endOffset: 9635,
    startLine: 249,
    endLine: 249,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9635,
    endOffset: 9635,
    startLine: 249,
    endLine: 249,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 9641,
    endOffset: 9651,
    startLine: 250,
    endLine: 250,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 9641,
    endOffset: 9651,
    startLine: 250,
    endLine: 250,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9653,
    endOffset: 9653,
    startLine: 250,
    endLine: 250,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9653,
    endOffset: 9653,
    startLine: 250,
    endLine: 250,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 9658,
    endOffset: 9658,
    startLine: 251,
    endLine: 251,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 9658,
    endOffset: 9658,
    startLine: 251,
    endLine: 251,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 9663,
    endOffset: 9673,
    startLine: 252,
    endLine: 252,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 9663,
    endOffset: 9673,
    startLine: 252,
    endLine: 252,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 9675,
    endOffset: 9675,
    startLine: 252,
    endLine: 252,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 9675,
    endOffset: 9675,
    startLine: 252,
    endLine: 252,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 9679,
    endOffset: 9685,
    startLine: 253,
    endLine: 253,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 9679,
    endOffset: 9685,
    startLine: 253,
    endLine: 253,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 9706,
    endOffset: 9719,
    startLine: 254,
    endLine: 254,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 9706,
    endOffset: 9719,
    startLine: 254,
    endLine: 254,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"gemeentenaam"',
    startOffset: 9687,
    endOffset: 9700,
    startLine: 253,
    endLine: 253,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"gemeentenaam"',
    startOffset: 9687,
    endOffset: 9700,
    startLine: 253,
    endLine: 253,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vd gemeente."',
    startOffset: 9721,
    endOffset: 9739,
    startLine: 254,
    endLine: 254,
    startColumn: 18,
    endColumn: 36,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vd gemeente."',
    startOffset: 9721,
    endOffset: 9739,
    startLine: 254,
    endLine: 254,
    startColumn: 18,
    endColumn: 36,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9702,
    endOffset: 9702,
    startLine: 253,
    endLine: 253,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9702,
    endOffset: 9702,
    startLine: 253,
    endLine: 253,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9741,
    endOffset: 9741,
    startLine: 254,
    endLine: 254,
    startColumn: 38,
    endColumn: 38,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9741,
    endOffset: 9741,
    startLine: 254,
    endLine: 254,
    startColumn: 38,
    endColumn: 38,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9798,
    endOffset: 9798,
    startLine: 255,
    endLine: 255,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9798,
    endOffset: 9798,
    startLine: 255,
    endLine: 255,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9870,
    endOffset: 9870,
    startLine: 256,
    endLine: 256,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9870,
    endOffset: 9870,
    startLine: 256,
    endLine: 256,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9888,
    endOffset: 9888,
    startLine: 257,
    endLine: 257,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9888,
    endOffset: 9888,
    startLine: 257,
    endLine: 257,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9745,
    endOffset: 9751,
    startLine: 255,
    endLine: 255,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 9745,
    endOffset: 9751,
    startLine: 255,
    endLine: 255,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 9753,
    endOffset: 9797,
    startLine: 255,
    endLine: 255,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 9753,
    endOffset: 9797,
    startLine: 255,
    endLine: 255,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 9802,
    endOffset: 9812,
    startLine: 256,
    endLine: 256,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 9802,
    endOffset: 9812,
    startLine: 256,
    endLine: 256,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 9814,
    endOffset: 9869,
    startLine: 256,
    endLine: 256,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 9814,
    endOffset: 9869,
    startLine: 256,
    endLine: 256,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 9874,
    endOffset: 9884,
    startLine: 257,
    endLine: 257,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 9874,
    endOffset: 9884,
    startLine: 257,
    endLine: 257,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9886,
    endOffset: 9886,
    startLine: 257,
    endLine: 257,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 9886,
    endOffset: 9886,
    startLine: 257,
    endLine: 257,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 9891,
    endOffset: 9891,
    startLine: 258,
    endLine: 258,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 9891,
    endOffset: 9891,
    startLine: 258,
    endLine: 258,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 9896,
    endOffset: 9904,
    startLine: 259,
    endLine: 259,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 9896,
    endOffset: 9904,
    startLine: 259,
    endLine: 259,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 9906,
    endOffset: 9910,
    startLine: 259,
    endLine: 259,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 9906,
    endOffset: 9910,
    startLine: 259,
    endLine: 259,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9313,
    endOffset: 9313,
    startLine: 242,
    endLine: 242,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9313,
    endOffset: 9313,
    startLine: 242,
    endLine: 242,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9382,
    endOffset: 9382,
    startLine: 243,
    endLine: 243,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9382,
    endOffset: 9382,
    startLine: 243,
    endLine: 243,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9660,
    endOffset: 9660,
    startLine: 251,
    endLine: 251,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9660,
    endOffset: 9660,
    startLine: 251,
    endLine: 251,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9893,
    endOffset: 9893,
    startLine: 258,
    endLine: 258,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9893,
    endOffset: 9893,
    startLine: 258,
    endLine: 258,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 9912,
    endOffset: 9912,
    startLine: 259,
    endLine: 259,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 9912,
    endOffset: 9912,
    startLine: 259,
    endLine: 259,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LigplaatsShape>',
    startOffset: 9915,
    endOffset: 9977,
    startLine: 261,
    endLine: 261,
    startColumn: 1,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#LigplaatsShape>',
    startOffset: 9915,
    endOffset: 9977,
    startLine: 261,
    endLine: 261,
    startColumn: 1,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 9980,
    endOffset: 9980,
    startLine: 262,
    endLine: 262,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 9980,
    endOffset: 9980,
    startLine: 262,
    endLine: 262,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 9982,
    endOffset: 9993,
    startLine: 262,
    endLine: 262,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 9982,
    endOffset: 9993,
    startLine: 262,
    endLine: 262,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 9998,
    endOffset: 10011,
    startLine: 263,
    endLine: 263,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 9998,
    endOffset: 10011,
    startLine: 263,
    endLine: 263,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Ligplaats> ',
    startOffset: 10013,
    endOffset: 10060,
    startLine: 263,
    endLine: 263,
    startColumn: 17,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Ligplaats> ',
    startOffset: 10013,
    endOffset: 10060,
    startLine: 263,
    endLine: 263,
    startColumn: 17,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 10064,
    endOffset: 10072,
    startLine: 264,
    endLine: 264,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 10064,
    endOffset: 10072,
    startLine: 264,
    endLine: 264,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 10074,
    endOffset: 10078,
    startLine: 264,
    endLine: 264,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 10074,
    endOffset: 10078,
    startLine: 264,
    endLine: 264,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9995,
    endOffset: 9995,
    startLine: 262,
    endLine: 262,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 9995,
    endOffset: 9995,
    startLine: 262,
    endLine: 262,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10061,
    endOffset: 10061,
    startLine: 263,
    endLine: 263,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10061,
    endOffset: 10061,
    startLine: 263,
    endLine: 263,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 10080,
    endOffset: 10080,
    startLine: 264,
    endLine: 264,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 10080,
    endOffset: 10080,
    startLine: 264,
    endLine: 264,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#StandplaatsShape>',
    startOffset: 10083,
    endOffset: 10147,
    startLine: 266,
    endLine: 266,
    startColumn: 1,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#StandplaatsShape>',
    startOffset: 10083,
    endOffset: 10147,
    startLine: 266,
    endLine: 266,
    startColumn: 1,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 10150,
    endOffset: 10150,
    startLine: 267,
    endLine: 267,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 10150,
    endOffset: 10150,
    startLine: 267,
    endLine: 267,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 10152,
    endOffset: 10163,
    startLine: 267,
    endLine: 267,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 10152,
    endOffset: 10163,
    startLine: 267,
    endLine: 267,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 10168,
    endOffset: 10181,
    startLine: 268,
    endLine: 268,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 10168,
    endOffset: 10181,
    startLine: 268,
    endLine: 268,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Standplaats> ',
    startOffset: 10183,
    endOffset: 10232,
    startLine: 268,
    endLine: 268,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Standplaats> ',
    startOffset: 10183,
    endOffset: 10232,
    startLine: 268,
    endLine: 268,
    startColumn: 17,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 10236,
    endOffset: 10244,
    startLine: 269,
    endLine: 269,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 10236,
    endOffset: 10244,
    startLine: 269,
    endLine: 269,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 10246,
    endOffset: 10250,
    startLine: 269,
    endLine: 269,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 10246,
    endOffset: 10250,
    startLine: 269,
    endLine: 269,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10165,
    endOffset: 10165,
    startLine: 267,
    endLine: 267,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10165,
    endOffset: 10165,
    startLine: 267,
    endLine: 267,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10233,
    endOffset: 10233,
    startLine: 268,
    endLine: 268,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10233,
    endOffset: 10233,
    startLine: 268,
    endLine: 268,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 10252,
    endOffset: 10252,
    startLine: 269,
    endLine: 269,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 10252,
    endOffset: 10252,
    startLine: 269,
    endLine: 269,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#PostinfoShape>',
    startOffset: 10255,
    endOffset: 10316,
    startLine: 271,
    endLine: 271,
    startColumn: 1,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#PostinfoShape>',
    startOffset: 10255,
    endOffset: 10316,
    startLine: 271,
    endLine: 271,
    startColumn: 1,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 10319,
    endOffset: 10319,
    startLine: 272,
    endLine: 272,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 10319,
    endOffset: 10319,
    startLine: 272,
    endLine: 272,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 10321,
    endOffset: 10332,
    startLine: 272,
    endLine: 272,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 10321,
    endOffset: 10332,
    startLine: 272,
    endLine: 272,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 10337,
    endOffset: 10350,
    startLine: 273,
    endLine: 273,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 10337,
    endOffset: 10350,
    startLine: 273,
    endLine: 273,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Postinfo> ',
    startOffset: 10352,
    endOffset: 10398,
    startLine: 273,
    endLine: 273,
    startColumn: 17,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Postinfo> ',
    startOffset: 10352,
    endOffset: 10398,
    startLine: 273,
    endLine: 273,
    startColumn: 17,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 10402,
    endOffset: 10412,
    startLine: 274,
    endLine: 274,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 10402,
    endOffset: 10412,
    startLine: 274,
    endLine: 274,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 10414,
    endOffset: 10414,
    startLine: 274,
    endLine: 274,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 10414,
    endOffset: 10414,
    startLine: 274,
    endLine: 274,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 10418,
    endOffset: 10424,
    startLine: 275,
    endLine: 275,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 10418,
    endOffset: 10424,
    startLine: 275,
    endLine: 275,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 10441,
    endOffset: 10454,
    startLine: 276,
    endLine: 276,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 10441,
    endOffset: 10454,
    startLine: 276,
    endLine: 276,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postnaam"',
    startOffset: 10426,
    endOffset: 10435,
    startLine: 275,
    endLine: 275,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postnaam"',
    startOffset: 10426,
    endOffset: 10435,
    startLine: 275,
    endLine: 275,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam waarmee het geografisch gebied dat de adressen voor postale doeleinden groepeert kan worden aangeduid."',
    startOffset: 10456,
    endOffset: 10564,
    startLine: 276,
    endLine: 276,
    startColumn: 18,
    endColumn: 126,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam waarmee het geografisch gebied dat de adressen voor postale doeleinden groepeert kan worden aangeduid."',
    startOffset: 10456,
    endOffset: 10564,
    startLine: 276,
    endLine: 276,
    startColumn: 18,
    endColumn: 126,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10437,
    endOffset: 10437,
    startLine: 275,
    endLine: 275,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10437,
    endOffset: 10437,
    startLine: 275,
    endLine: 275,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10566,
    endOffset: 10566,
    startLine: 276,
    endLine: 276,
    startColumn: 128,
    endColumn: 128,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10566,
    endOffset: 10566,
    startLine: 276,
    endLine: 276,
    startColumn: 128,
    endColumn: 128,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10625,
    endOffset: 10625,
    startLine: 277,
    endLine: 277,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10625,
    endOffset: 10625,
    startLine: 277,
    endLine: 277,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10697,
    endOffset: 10697,
    startLine: 278,
    endLine: 278,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10697,
    endOffset: 10697,
    startLine: 278,
    endLine: 278,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 10570,
    endOffset: 10576,
    startLine: 277,
    endLine: 277,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 10570,
    endOffset: 10576,
    startLine: 277,
    endLine: 277,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#postnaam> ',
    startOffset: 10578,
    endOffset: 10624,
    startLine: 277,
    endLine: 277,
    startColumn: 11,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#postnaam> ',
    startOffset: 10578,
    endOffset: 10624,
    startLine: 277,
    endLine: 277,
    startColumn: 11,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 10629,
    endOffset: 10639,
    startLine: 278,
    endLine: 278,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 10629,
    endOffset: 10639,
    startLine: 278,
    endLine: 278,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 10641,
    endOffset: 10696,
    startLine: 278,
    endLine: 278,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 10641,
    endOffset: 10696,
    startLine: 278,
    endLine: 278,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 10700,
    endOffset: 10700,
    startLine: 279,
    endLine: 279,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 10700,
    endOffset: 10700,
    startLine: 279,
    endLine: 279,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 10705,
    endOffset: 10715,
    startLine: 280,
    endLine: 280,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 10705,
    endOffset: 10715,
    startLine: 280,
    endLine: 280,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 10717,
    endOffset: 10717,
    startLine: 280,
    endLine: 280,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 10717,
    endOffset: 10717,
    startLine: 280,
    endLine: 280,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 10721,
    endOffset: 10727,
    startLine: 281,
    endLine: 281,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 10721,
    endOffset: 10727,
    startLine: 281,
    endLine: 281,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 10744,
    endOffset: 10757,
    startLine: 282,
    endLine: 282,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 10744,
    endOffset: 10757,
    startLine: 282,
    endLine: 282,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postcode"',
    startOffset: 10729,
    endOffset: 10738,
    startLine: 281,
    endLine: 281,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"postcode"',
    startOffset: 10729,
    endOffset: 10738,
    startLine: 281,
    endLine: 281,
    startColumn: 11,
    endColumn: 20,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Code waarmee het geografisch gebied dat de adressen voor postale doeleinden groepeert aanduidt."',
    startOffset: 10759,
    endOffset: 10855,
    startLine: 282,
    endLine: 282,
    startColumn: 18,
    endColumn: 114,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Code waarmee het geografisch gebied dat de adressen voor postale doeleinden groepeert aanduidt."',
    startOffset: 10759,
    endOffset: 10855,
    startLine: 282,
    endLine: 282,
    startColumn: 18,
    endColumn: 114,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10740,
    endOffset: 10740,
    startLine: 281,
    endLine: 281,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10740,
    endOffset: 10740,
    startLine: 281,
    endLine: 281,
    startColumn: 22,
    endColumn: 22,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10857,
    endOffset: 10857,
    startLine: 282,
    endLine: 282,
    startColumn: 116,
    endColumn: 116,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10857,
    endOffset: 10857,
    startLine: 282,
    endLine: 282,
    startColumn: 116,
    endColumn: 116,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10916,
    endOffset: 10916,
    startLine: 283,
    endLine: 283,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10916,
    endOffset: 10916,
    startLine: 283,
    endLine: 283,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 10861,
    endOffset: 10867,
    startLine: 283,
    endLine: 283,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 10861,
    endOffset: 10867,
    startLine: 283,
    endLine: 283,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#postcode> ',
    startOffset: 10869,
    endOffset: 10915,
    startLine: 283,
    endLine: 283,
    startColumn: 11,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#postcode> ',
    startOffset: 10869,
    endOffset: 10915,
    startLine: 283,
    endLine: 283,
    startColumn: 11,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 10920,
    endOffset: 10930,
    startLine: 284,
    endLine: 284,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 10920,
    endOffset: 10930,
    startLine: 284,
    endLine: 284,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 10932,
    endOffset: 10971,
    startLine: 284,
    endLine: 284,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 10932,
    endOffset: 10971,
    startLine: 284,
    endLine: 284,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 10978,
    endOffset: 10988,
    startLine: 285,
    endLine: 285,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 10978,
    endOffset: 10988,
    startLine: 285,
    endLine: 285,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 10990,
    endOffset: 10990,
    startLine: 285,
    endLine: 285,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 10990,
    endOffset: 10990,
    startLine: 285,
    endLine: 285,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 10996,
    endOffset: 11006,
    startLine: 286,
    endLine: 286,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 10996,
    endOffset: 11006,
    startLine: 286,
    endLine: 286,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 11008,
    endOffset: 11008,
    startLine: 286,
    endLine: 286,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 11008,
    endOffset: 11008,
    startLine: 286,
    endLine: 286,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10334,
    endOffset: 10334,
    startLine: 272,
    endLine: 272,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10334,
    endOffset: 10334,
    startLine: 272,
    endLine: 272,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10399,
    endOffset: 10399,
    startLine: 273,
    endLine: 273,
    startColumn: 64,
    endColumn: 64,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10399,
    endOffset: 10399,
    startLine: 273,
    endLine: 273,
    startColumn: 64,
    endColumn: 64,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10702,
    endOffset: 10702,
    startLine: 279,
    endLine: 279,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10702,
    endOffset: 10702,
    startLine: 279,
    endLine: 279,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10974,
    endOffset: 10974,
    startLine: 284,
    endLine: 284,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10974,
    endOffset: 10974,
    startLine: 284,
    endLine: 284,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10992,
    endOffset: 10992,
    startLine: 285,
    endLine: 285,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 10992,
    endOffset: 10992,
    startLine: 285,
    endLine: 285,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11010,
    endOffset: 11010,
    startLine: 286,
    endLine: 286,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11010,
    endOffset: 11010,
    startLine: 286,
    endLine: 286,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresuitbreidingShape>',
    startOffset: 11037,
    endOffset: 11106,
    startLine: 290,
    endLine: 290,
    startColumn: 1,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresuitbreidingShape>',
    startOffset: 11037,
    endOffset: 11106,
    startLine: 290,
    endLine: 290,
    startColumn: 1,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 11109,
    endOffset: 11109,
    startLine: 291,
    endLine: 291,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 11109,
    endOffset: 11109,
    startLine: 291,
    endLine: 291,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 11111,
    endOffset: 11122,
    startLine: 291,
    endLine: 291,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 11111,
    endOffset: 11122,
    startLine: 291,
    endLine: 291,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 11127,
    endOffset: 11140,
    startLine: 292,
    endLine: 292,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 11127,
    endOffset: 11140,
    startLine: 292,
    endLine: 292,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresuitbreiding> ',
    startOffset: 11142,
    endOffset: 11196,
    startLine: 292,
    endLine: 292,
    startColumn: 17,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresuitbreiding> ',
    startOffset: 11142,
    endOffset: 11196,
    startLine: 292,
    endLine: 292,
    startColumn: 17,
    endColumn: 71,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11200,
    endOffset: 11210,
    startLine: 293,
    endLine: 293,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11200,
    endOffset: 11210,
    startLine: 293,
    endLine: 293,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11212,
    endOffset: 11212,
    startLine: 293,
    endLine: 293,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11212,
    endOffset: 11212,
    startLine: 293,
    endLine: 293,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11216,
    endOffset: 11222,
    startLine: 294,
    endLine: 294,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11216,
    endOffset: 11222,
    startLine: 294,
    endLine: 294,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11247,
    endOffset: 11260,
    startLine: 295,
    endLine: 295,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11247,
    endOffset: 11260,
    startLine: 295,
    endLine: 295,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adresIsGelegenIn"',
    startOffset: 11224,
    endOffset: 11241,
    startLine: 294,
    endLine: 294,
    startColumn: 11,
    endColumn: 28,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adresIsGelegenIn"',
    startOffset: 11224,
    endOffset: 11241,
    startLine: 294,
    endLine: 294,
    startColumn: 11,
    endColumn: 28,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Plaats of gebied waarbinnen het Adres gelegen is."',
    startOffset: 11262,
    endOffset: 11312,
    startLine: 295,
    endLine: 295,
    startColumn: 18,
    endColumn: 68,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Plaats of gebied waarbinnen het Adres gelegen is."',
    startOffset: 11262,
    endOffset: 11312,
    startLine: 295,
    endLine: 295,
    startColumn: 18,
    endColumn: 68,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11243,
    endOffset: 11243,
    startLine: 294,
    endLine: 294,
    startColumn: 30,
    endColumn: 30,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11243,
    endOffset: 11243,
    startLine: 294,
    endLine: 294,
    startColumn: 30,
    endColumn: 30,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11314,
    endOffset: 11314,
    startLine: 295,
    endLine: 295,
    startColumn: 70,
    endColumn: 70,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11314,
    endOffset: 11314,
    startLine: 295,
    endLine: 295,
    startColumn: 70,
    endColumn: 70,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11381,
    endOffset: 11381,
    startLine: 296,
    endLine: 296,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11381,
    endOffset: 11381,
    startLine: 296,
    endLine: 296,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11430,
    endOffset: 11430,
    startLine: 297,
    endLine: 297,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11430,
    endOffset: 11430,
    startLine: 297,
    endLine: 297,
    startColumn: 48,
    endColumn: 48,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11318,
    endOffset: 11324,
    startLine: 296,
    endLine: 296,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11318,
    endOffset: 11324,
    startLine: 296,
    endLine: 296,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#adresIsGelegenIn> ',
    startOffset: 11326,
    endOffset: 11380,
    startLine: 296,
    endLine: 296,
    startColumn: 11,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#adresIsGelegenIn> ',
    startOffset: 11326,
    endOffset: 11380,
    startLine: 296,
    endLine: 296,
    startColumn: 11,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 11385,
    endOffset: 11392,
    startLine: 297,
    endLine: 297,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 11385,
    endOffset: 11392,
    startLine: 297,
    endLine: 297,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/dc/terms/Location> ',
    startOffset: 11394,
    endOffset: 11429,
    startLine: 297,
    endLine: 297,
    startColumn: 12,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://purl.org/dc/terms/Location> ',
    startOffset: 11394,
    endOffset: 11429,
    startLine: 297,
    endLine: 297,
    startColumn: 12,
    endColumn: 47,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11433,
    endOffset: 11433,
    startLine: 298,
    endLine: 298,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11433,
    endOffset: 11433,
    startLine: 298,
    endLine: 298,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11438,
    endOffset: 11448,
    startLine: 299,
    endLine: 299,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11438,
    endOffset: 11448,
    startLine: 299,
    endLine: 299,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11450,
    endOffset: 11450,
    startLine: 299,
    endLine: 299,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11450,
    endOffset: 11450,
    startLine: 299,
    endLine: 299,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11454,
    endOffset: 11460,
    startLine: 300,
    endLine: 300,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11454,
    endOffset: 11460,
    startLine: 300,
    endLine: 300,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11481,
    endOffset: 11494,
    startLine: 301,
    endLine: 301,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11481,
    endOffset: 11494,
    startLine: 301,
    endLine: 301,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adreslocator"',
    startOffset: 11462,
    endOffset: 11475,
    startLine: 300,
    endLine: 300,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"adreslocator"',
    startOffset: 11462,
    endOffset: 11475,
    startLine: 300,
    endLine: 300,
    startColumn: 11,
    endColumn: 24,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Bijkomende adreslocator."',
    startOffset: 11496,
    endOffset: 11521,
    startLine: 301,
    endLine: 301,
    startColumn: 18,
    endColumn: 43,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Bijkomende adreslocator."',
    startOffset: 11496,
    endOffset: 11521,
    startLine: 301,
    endLine: 301,
    startColumn: 18,
    endColumn: 43,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11477,
    endOffset: 11477,
    startLine: 300,
    endLine: 300,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11477,
    endOffset: 11477,
    startLine: 300,
    endLine: 300,
    startColumn: 26,
    endColumn: 26,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11523,
    endOffset: 11523,
    startLine: 301,
    endLine: 301,
    startColumn: 45,
    endColumn: 45,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11523,
    endOffset: 11523,
    startLine: 301,
    endLine: 301,
    startColumn: 45,
    endColumn: 45,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11586,
    endOffset: 11586,
    startLine: 302,
    endLine: 302,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11586,
    endOffset: 11586,
    startLine: 302,
    endLine: 302,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11650,
    endOffset: 11650,
    startLine: 303,
    endLine: 303,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11650,
    endOffset: 11650,
    startLine: 303,
    endLine: 303,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11527,
    endOffset: 11533,
    startLine: 302,
    endLine: 302,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11527,
    endOffset: 11533,
    startLine: 302,
    endLine: 302,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#adreslocator> ',
    startOffset: 11535,
    endOffset: 11585,
    startLine: 302,
    endLine: 302,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#adreslocator> ',
    startOffset: 11535,
    endOffset: 11585,
    startLine: 302,
    endLine: 302,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 11590,
    endOffset: 11597,
    startLine: 303,
    endLine: 303,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 11590,
    endOffset: 11597,
    startLine: 303,
    endLine: 303,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adreslocator> ',
    startOffset: 11599,
    endOffset: 11649,
    startLine: 303,
    endLine: 303,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adreslocator> ',
    startOffset: 11599,
    endOffset: 11649,
    startLine: 303,
    endLine: 303,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11653,
    endOffset: 11653,
    startLine: 304,
    endLine: 304,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11653,
    endOffset: 11653,
    startLine: 304,
    endLine: 304,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11658,
    endOffset: 11668,
    startLine: 305,
    endLine: 305,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 11658,
    endOffset: 11668,
    startLine: 305,
    endLine: 305,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11670,
    endOffset: 11670,
    startLine: 305,
    endLine: 305,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 11670,
    endOffset: 11670,
    startLine: 305,
    endLine: 305,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11674,
    endOffset: 11680,
    startLine: 306,
    endLine: 306,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 11674,
    endOffset: 11680,
    startLine: 306,
    endLine: 306,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11702,
    endOffset: 11715,
    startLine: 307,
    endLine: 307,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 11702,
    endOffset: 11715,
    startLine: 307,
    endLine: 307,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"volledigAdres"',
    startOffset: 11682,
    endOffset: 11696,
    startLine: 306,
    endLine: 306,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"volledigAdres"',
    startOffset: 11682,
    endOffset: 11696,
    startLine: 306,
    endLine: 306,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het complete adres in ├⌐├⌐n string, al dan niet geformatteerd."',
    startOffset: 11717,
    endOffset: 11778,
    startLine: 307,
    endLine: 307,
    startColumn: 18,
    endColumn: 79,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Het complete adres in ├⌐├⌐n string, al dan niet geformatteerd."',
    startOffset: 11717,
    endOffset: 11778,
    startLine: 307,
    endLine: 307,
    startColumn: 18,
    endColumn: 79,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11698,
    endOffset: 11698,
    startLine: 306,
    endLine: 306,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11698,
    endOffset: 11698,
    startLine: 306,
    endLine: 306,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11780,
    endOffset: 11780,
    startLine: 307,
    endLine: 307,
    startColumn: 81,
    endColumn: 81,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11780,
    endOffset: 11780,
    startLine: 307,
    endLine: 307,
    startColumn: 81,
    endColumn: 81,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11844,
    endOffset: 11844,
    startLine: 308,
    endLine: 308,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11844,
    endOffset: 11844,
    startLine: 308,
    endLine: 308,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11916,
    endOffset: 11916,
    startLine: 309,
    endLine: 309,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11916,
    endOffset: 11916,
    startLine: 309,
    endLine: 309,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11784,
    endOffset: 11790,
    startLine: 308,
    endLine: 308,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 11784,
    endOffset: 11790,
    startLine: 308,
    endLine: 308,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#volledigAdres> ',
    startOffset: 11792,
    endOffset: 11843,
    startLine: 308,
    endLine: 308,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#volledigAdres> ',
    startOffset: 11792,
    endOffset: 11843,
    startLine: 308,
    endLine: 308,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 11848,
    endOffset: 11858,
    startLine: 309,
    endLine: 309,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 11848,
    endOffset: 11858,
    startLine: 309,
    endLine: 309,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 11860,
    endOffset: 11915,
    startLine: 309,
    endLine: 309,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 11860,
    endOffset: 11915,
    startLine: 309,
    endLine: 309,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11919,
    endOffset: 11919,
    startLine: 310,
    endLine: 310,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 11919,
    endOffset: 11919,
    startLine: 310,
    endLine: 310,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 11924,
    endOffset: 11932,
    startLine: 311,
    endLine: 311,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 11924,
    endOffset: 11932,
    startLine: 311,
    endLine: 311,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 11934,
    endOffset: 11938,
    startLine: 311,
    endLine: 311,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 11934,
    endOffset: 11938,
    startLine: 311,
    endLine: 311,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11124,
    endOffset: 11124,
    startLine: 291,
    endLine: 291,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11124,
    endOffset: 11124,
    startLine: 291,
    endLine: 291,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11197,
    endOffset: 11197,
    startLine: 292,
    endLine: 292,
    startColumn: 72,
    endColumn: 72,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11197,
    endOffset: 11197,
    startLine: 292,
    endLine: 292,
    startColumn: 72,
    endColumn: 72,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11435,
    endOffset: 11435,
    startLine: 298,
    endLine: 298,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11435,
    endOffset: 11435,
    startLine: 298,
    endLine: 298,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11655,
    endOffset: 11655,
    startLine: 304,
    endLine: 304,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11655,
    endOffset: 11655,
    startLine: 304,
    endLine: 304,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11921,
    endOffset: 11921,
    startLine: 310,
    endLine: 310,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 11921,
    endOffset: 11921,
    startLine: 310,
    endLine: 310,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 11940,
    endOffset: 11940,
    startLine: 311,
    endLine: 311,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 11940,
    endOffset: 11940,
    startLine: 311,
    endLine: 311,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#StraatnaamShape>',
    startOffset: 11943,
    endOffset: 12006,
    startLine: 313,
    endLine: 313,
    startColumn: 1,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#StraatnaamShape>',
    startOffset: 11943,
    endOffset: 12006,
    startLine: 313,
    endLine: 313,
    startColumn: 1,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 12009,
    endOffset: 12009,
    startLine: 314,
    endLine: 314,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 12009,
    endOffset: 12009,
    startLine: 314,
    endLine: 314,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 12011,
    endOffset: 12022,
    startLine: 314,
    endLine: 314,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 12011,
    endOffset: 12022,
    startLine: 314,
    endLine: 314,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 12027,
    endOffset: 12040,
    startLine: 315,
    endLine: 315,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 12027,
    endOffset: 12040,
    startLine: 315,
    endLine: 315,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam> ',
    startOffset: 12042,
    endOffset: 12090,
    startLine: 315,
    endLine: 315,
    startColumn: 17,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam> ',
    startOffset: 12042,
    endOffset: 12090,
    startLine: 315,
    endLine: 315,
    startColumn: 17,
    endColumn: 65,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12094,
    endOffset: 12104,
    startLine: 316,
    endLine: 316,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12094,
    endOffset: 12104,
    startLine: 316,
    endLine: 316,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12106,
    endOffset: 12106,
    startLine: 316,
    endLine: 316,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12106,
    endOffset: 12106,
    startLine: 316,
    endLine: 316,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12110,
    endOffset: 12116,
    startLine: 317,
    endLine: 317,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12110,
    endOffset: 12116,
    startLine: 317,
    endLine: 317,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12140,
    endOffset: 12153,
    startLine: 318,
    endLine: 318,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12140,
    endOffset: 12153,
    startLine: 318,
    endLine: 318,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendDoor"',
    startOffset: 12118,
    endOffset: 12134,
    startLine: 317,
    endLine: 317,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendDoor"',
    startOffset: 12118,
    endOffset: 12134,
    startLine: 317,
    endLine: 317,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Agent die de straatnaam heeft toegekend."',
    startOffset: 12155,
    endOffset: 12196,
    startLine: 318,
    endLine: 318,
    startColumn: 18,
    endColumn: 59,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Agent die de straatnaam heeft toegekend."',
    startOffset: 12155,
    endOffset: 12196,
    startLine: 318,
    endLine: 318,
    startColumn: 18,
    endColumn: 59,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12136,
    endOffset: 12136,
    startLine: 317,
    endLine: 317,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12136,
    endOffset: 12136,
    startLine: 317,
    endLine: 317,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12198,
    endOffset: 12198,
    startLine: 318,
    endLine: 318,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12198,
    endOffset: 12198,
    startLine: 318,
    endLine: 318,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12254,
    endOffset: 12254,
    startLine: 319,
    endLine: 319,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12254,
    endOffset: 12254,
    startLine: 319,
    endLine: 319,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12317,
    endOffset: 12317,
    startLine: 320,
    endLine: 320,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12317,
    endOffset: 12317,
    startLine: 320,
    endLine: 320,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12335,
    endOffset: 12335,
    startLine: 321,
    endLine: 321,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12335,
    endOffset: 12335,
    startLine: 321,
    endLine: 321,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12353,
    endOffset: 12353,
    startLine: 322,
    endLine: 322,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12353,
    endOffset: 12353,
    startLine: 322,
    endLine: 322,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12202,
    endOffset: 12208,
    startLine: 319,
    endLine: 319,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12202,
    endOffset: 12208,
    startLine: 319,
    endLine: 319,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/prov#wasAttributedTo> ',
    startOffset: 12210,
    endOffset: 12253,
    startLine: 319,
    endLine: 319,
    startColumn: 11,
    endColumn: 54,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/prov#wasAttributedTo> ',
    startOffset: 12210,
    endOffset: 12253,
    startLine: 319,
    endLine: 319,
    startColumn: 11,
    endColumn: 54,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 12258,
    endOffset: 12265,
    startLine: 320,
    endLine: 320,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 12258,
    endOffset: 12265,
    startLine: 320,
    endLine: 320,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 12267,
    endOffset: 12316,
    startLine: 320,
    endLine: 320,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 12267,
    endOffset: 12316,
    startLine: 320,
    endLine: 320,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 12321,
    endOffset: 12331,
    startLine: 321,
    endLine: 321,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 12321,
    endOffset: 12331,
    startLine: 321,
    endLine: 321,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12333,
    endOffset: 12333,
    startLine: 321,
    endLine: 321,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12333,
    endOffset: 12333,
    startLine: 321,
    endLine: 321,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 12339,
    endOffset: 12349,
    startLine: 322,
    endLine: 322,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 12339,
    endOffset: 12349,
    startLine: 322,
    endLine: 322,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12351,
    endOffset: 12351,
    startLine: 322,
    endLine: 322,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12351,
    endOffset: 12351,
    startLine: 322,
    endLine: 322,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 12356,
    endOffset: 12356,
    startLine: 323,
    endLine: 323,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 12356,
    endOffset: 12356,
    startLine: 323,
    endLine: 323,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12361,
    endOffset: 12371,
    startLine: 324,
    endLine: 324,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12361,
    endOffset: 12371,
    startLine: 324,
    endLine: 324,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12373,
    endOffset: 12373,
    startLine: 324,
    endLine: 324,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12373,
    endOffset: 12373,
    startLine: 324,
    endLine: 324,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12377,
    endOffset: 12383,
    startLine: 325,
    endLine: 325,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12377,
    endOffset: 12383,
    startLine: 325,
    endLine: 325,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12402,
    endOffset: 12415,
    startLine: 326,
    endLine: 326,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12402,
    endOffset: 12415,
    startLine: 326,
    endLine: 326,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"straatnaam"',
    startOffset: 12385,
    endOffset: 12396,
    startLine: 325,
    endLine: 325,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"straatnaam"',
    startOffset: 12385,
    endOffset: 12396,
    startLine: 325,
    endLine: 325,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vd straat."',
    startOffset: 12417,
    endOffset: 12433,
    startLine: 326,
    endLine: 326,
    startColumn: 18,
    endColumn: 34,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Naam vd straat."',
    startOffset: 12417,
    endOffset: 12433,
    startLine: 326,
    endLine: 326,
    startColumn: 18,
    endColumn: 34,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12398,
    endOffset: 12398,
    startLine: 325,
    endLine: 325,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12398,
    endOffset: 12398,
    startLine: 325,
    endLine: 325,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12435,
    endOffset: 12435,
    startLine: 326,
    endLine: 326,
    startColumn: 36,
    endColumn: 36,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12435,
    endOffset: 12435,
    startLine: 326,
    endLine: 326,
    startColumn: 36,
    endColumn: 36,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12492,
    endOffset: 12492,
    startLine: 327,
    endLine: 327,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12492,
    endOffset: 12492,
    startLine: 327,
    endLine: 327,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12564,
    endOffset: 12564,
    startLine: 328,
    endLine: 328,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12564,
    endOffset: 12564,
    startLine: 328,
    endLine: 328,
    startColumn: 71,
    endColumn: 71,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12582,
    endOffset: 12582,
    startLine: 329,
    endLine: 329,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12582,
    endOffset: 12582,
    startLine: 329,
    endLine: 329,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12439,
    endOffset: 12445,
    startLine: 327,
    endLine: 327,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12439,
    endOffset: 12445,
    startLine: 327,
    endLine: 327,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 12447,
    endOffset: 12491,
    startLine: 327,
    endLine: 327,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2000/01/rdf-schema#label> ',
    startOffset: 12447,
    endOffset: 12491,
    startLine: 327,
    endLine: 327,
    startColumn: 11,
    endColumn: 55,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 12496,
    endOffset: 12506,
    startLine: 328,
    endLine: 328,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 12496,
    endOffset: 12506,
    startLine: 328,
    endLine: 328,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 12508,
    endOffset: 12563,
    startLine: 328,
    endLine: 328,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> ',
    startOffset: 12508,
    endOffset: 12563,
    startLine: 328,
    endLine: 328,
    startColumn: 15,
    endColumn: 70,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 12568,
    endOffset: 12578,
    startLine: 329,
    endLine: 329,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 12568,
    endOffset: 12578,
    startLine: 329,
    endLine: 329,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12580,
    endOffset: 12580,
    startLine: 329,
    endLine: 329,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12580,
    endOffset: 12580,
    startLine: 329,
    endLine: 329,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 12585,
    endOffset: 12585,
    startLine: 330,
    endLine: 330,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 12585,
    endOffset: 12585,
    startLine: 330,
    endLine: 330,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12590,
    endOffset: 12600,
    startLine: 331,
    endLine: 331,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 12590,
    endOffset: 12600,
    startLine: 331,
    endLine: 331,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12602,
    endOffset: 12602,
    startLine: 331,
    endLine: 331,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12602,
    endOffset: 12602,
    startLine: 331,
    endLine: 331,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12606,
    endOffset: 12612,
    startLine: 332,
    endLine: 332,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12606,
    endOffset: 12612,
    startLine: 332,
    endLine: 332,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12639,
    endOffset: 12652,
    startLine: 333,
    endLine: 333,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12639,
    endOffset: 12652,
    startLine: 333,
    endLine: 333,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"homoniemToevoeging"',
    startOffset: 12614,
    endOffset: 12633,
    startLine: 332,
    endLine: 332,
    startColumn: 11,
    endColumn: 30,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"homoniemToevoeging"',
    startOffset: 12614,
    endOffset: 12633,
    startLine: 332,
    endLine: 332,
    startColumn: 11,
    endColumn: 30,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Toevoeging om dubbele straatnamen (straatnamen met dezelfde naam maar andere ligging in de gemeente en eigen adressen) van elkaar te onderscheiden."',
    startOffset: 12654,
    endOffset: 12802,
    startLine: 333,
    endLine: 333,
    startColumn: 18,
    endColumn: 166,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Toevoeging om dubbele straatnamen (straatnamen met dezelfde naam maar andere ligging in de gemeente en eigen adressen) van elkaar te onderscheiden."',
    startOffset: 12654,
    endOffset: 12802,
    startLine: 333,
    endLine: 333,
    startColumn: 18,
    endColumn: 166,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12635,
    endOffset: 12635,
    startLine: 332,
    endLine: 332,
    startColumn: 32,
    endColumn: 32,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12635,
    endOffset: 12635,
    startLine: 332,
    endLine: 332,
    startColumn: 32,
    endColumn: 32,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12804,
    endOffset: 12804,
    startLine: 333,
    endLine: 333,
    startColumn: 168,
    endColumn: 168,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12804,
    endOffset: 12804,
    startLine: 333,
    endLine: 333,
    startColumn: 168,
    endColumn: 168,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12873,
    endOffset: 12873,
    startLine: 334,
    endLine: 334,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12873,
    endOffset: 12873,
    startLine: 334,
    endLine: 334,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12808,
    endOffset: 12814,
    startLine: 334,
    endLine: 334,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 12808,
    endOffset: 12814,
    startLine: 334,
    endLine: 334,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#homoniemToevoeging> ',
    startOffset: 12816,
    endOffset: 12872,
    startLine: 334,
    endLine: 334,
    startColumn: 11,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#homoniemToevoeging> ',
    startOffset: 12816,
    endOffset: 12872,
    startLine: 334,
    endLine: 334,
    startColumn: 11,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 12877,
    endOffset: 12887,
    startLine: 335,
    endLine: 335,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 12877,
    endOffset: 12887,
    startLine: 335,
    endLine: 335,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 12889,
    endOffset: 12928,
    startLine: 335,
    endLine: 335,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 12889,
    endOffset: 12928,
    startLine: 335,
    endLine: 335,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 12935,
    endOffset: 12945,
    startLine: 336,
    endLine: 336,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 12935,
    endOffset: 12945,
    startLine: 336,
    endLine: 336,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12947,
    endOffset: 12947,
    startLine: 336,
    endLine: 336,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 12947,
    endOffset: 12947,
    startLine: 336,
    endLine: 336,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12024,
    endOffset: 12024,
    startLine: 314,
    endLine: 314,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12024,
    endOffset: 12024,
    startLine: 314,
    endLine: 314,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12091,
    endOffset: 12091,
    startLine: 315,
    endLine: 315,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12091,
    endOffset: 12091,
    startLine: 315,
    endLine: 315,
    startColumn: 66,
    endColumn: 66,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12358,
    endOffset: 12358,
    startLine: 323,
    endLine: 323,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12358,
    endOffset: 12358,
    startLine: 323,
    endLine: 323,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12587,
    endOffset: 12587,
    startLine: 330,
    endLine: 330,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12587,
    endOffset: 12587,
    startLine: 330,
    endLine: 330,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12931,
    endOffset: 12931,
    startLine: 335,
    endLine: 335,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12931,
    endOffset: 12931,
    startLine: 335,
    endLine: 335,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12949,
    endOffset: 12949,
    startLine: 336,
    endLine: 336,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12949,
    endOffset: 12949,
    startLine: 336,
    endLine: 336,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12969,
    endOffset: 12969,
    startLine: 338,
    endLine: 338,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 12969,
    endOffset: 12969,
    startLine: 338,
    endLine: 338,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12973,
    endOffset: 12979,
    startLine: 339,
    endLine: 339,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 12973,
    endOffset: 12979,
    startLine: 339,
    endLine: 339,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12994,
    endOffset: 13007,
    startLine: 340,
    endLine: 340,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 12994,
    endOffset: 13007,
    startLine: 340,
    endLine: 340,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"status"',
    startOffset: 12981,
    endOffset: 12988,
    startLine: 339,
    endLine: 339,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"status"',
    startOffset: 12981,
    endOffset: 12988,
    startLine: 339,
    endLine: 339,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Actuele toestand van de straatnaam."',
    startOffset: 13009,
    endOffset: 13045,
    startLine: 340,
    endLine: 340,
    startColumn: 18,
    endColumn: 54,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Actuele toestand van de straatnaam."',
    startOffset: 13009,
    endOffset: 13045,
    startLine: 340,
    endLine: 340,
    startColumn: 18,
    endColumn: 54,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12990,
    endOffset: 12990,
    startLine: 339,
    endLine: 339,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 12990,
    endOffset: 12990,
    startLine: 339,
    endLine: 339,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13047,
    endOffset: 13047,
    startLine: 340,
    endLine: 340,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13047,
    endOffset: 13047,
    startLine: 340,
    endLine: 340,
    startColumn: 56,
    endColumn: 56,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13115,
    endOffset: 13115,
    startLine: 341,
    endLine: 341,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13115,
    endOffset: 13115,
    startLine: 341,
    endLine: 341,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13174,
    endOffset: 13174,
    startLine: 342,
    endLine: 342,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13174,
    endOffset: 13174,
    startLine: 342,
    endLine: 342,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13192,
    endOffset: 13192,
    startLine: 343,
    endLine: 343,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13192,
    endOffset: 13192,
    startLine: 343,
    endLine: 343,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13210,
    endOffset: 13210,
    startLine: 344,
    endLine: 344,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13210,
    endOffset: 13210,
    startLine: 344,
    endLine: 344,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13051,
    endOffset: 13057,
    startLine: 341,
    endLine: 341,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13051,
    endOffset: 13057,
    startLine: 341,
    endLine: 341,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam.status> ',
    startOffset: 13059,
    endOffset: 13114,
    startLine: 341,
    endLine: 341,
    startColumn: 11,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam.status> ',
    startOffset: 13059,
    endOffset: 13114,
    startLine: 341,
    endLine: 341,
    startColumn: 11,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13119,
    endOffset: 13126,
    startLine: 342,
    endLine: 342,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13119,
    endOffset: 13126,
    startLine: 342,
    endLine: 342,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 13128,
    endOffset: 13173,
    startLine: 342,
    endLine: 342,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 13128,
    endOffset: 13173,
    startLine: 342,
    endLine: 342,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 13178,
    endOffset: 13188,
    startLine: 343,
    endLine: 343,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 13178,
    endOffset: 13188,
    startLine: 343,
    endLine: 343,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 13190,
    endOffset: 13190,
    startLine: 343,
    endLine: 343,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 13190,
    endOffset: 13190,
    startLine: 343,
    endLine: 343,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 13196,
    endOffset: 13206,
    startLine: 344,
    endLine: 344,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 13196,
    endOffset: 13206,
    startLine: 344,
    endLine: 344,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 13208,
    endOffset: 13208,
    startLine: 344,
    endLine: 344,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 13208,
    endOffset: 13208,
    startLine: 344,
    endLine: 344,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 13213,
    endOffset: 13213,
    startLine: 345,
    endLine: 345,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 13213,
    endOffset: 13213,
    startLine: 345,
    endLine: 345,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array], Period: [Array] }
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresseerbaarObjectShape>',
    startOffset: 13237,
    endOffset: 13309,
    startLine: 348,
    endLine: 348,
    startColumn: 1,
    endColumn: 73,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresseerbaarObjectShape>',
    startOffset: 13237,
    endOffset: 13309,
    startLine: 348,
    endLine: 348,
    startColumn: 1,
    endColumn: 73,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 13312,
    endOffset: 13312,
    startLine: 349,
    endLine: 349,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 13312,
    endOffset: 13312,
    startLine: 349,
    endLine: 349,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 13314,
    endOffset: 13325,
    startLine: 349,
    endLine: 349,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 13314,
    endOffset: 13325,
    startLine: 349,
    endLine: 349,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 13330,
    endOffset: 13343,
    startLine: 350,
    endLine: 350,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 13330,
    endOffset: 13343,
    startLine: 350,
    endLine: 350,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#AdresseerbaarObject> ',
    startOffset: 13345,
    endOffset: 13402,
    startLine: 350,
    endLine: 350,
    startColumn: 17,
    endColumn: 74,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#AdresseerbaarObject> ',
    startOffset: 13345,
    endOffset: 13402,
    startLine: 350,
    endLine: 350,
    startColumn: 17,
    endColumn: 74,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclBooleanConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclBooleanConstraint',
    children: { BooleanTakingPredicate: [Array], FALSE: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 13406,
    endOffset: 13414,
    startLine: 351,
    endLine: 351,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:closed',
    startOffset: 13406,
    endOffset: 13414,
    startLine: 351,
    endLine: 351,
    startColumn: 2,
    endColumn: 10,
    tokenTypeIdx: 492,
    tokenType: {
      PATTERN: 'sh:closed',
      CATEGORIES: [Array],
      tokenTypeIdx: 492,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_closed_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 13416,
    endOffset: 13420,
    startLine: 351,
    endLine: 351,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'false',
    startOffset: 13416,
    endOffset: 13420,
    startLine: 351,
    endLine: 351,
    startColumn: 12,
    endColumn: 16,
    tokenTypeIdx: 182,
    tokenType: {
      PATTERN: /false/,
      tokenTypeIdx: 182,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'FALSE',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclBooleanConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13327,
    endOffset: 13327,
    startLine: 349,
    endLine: 349,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13327,
    endOffset: 13327,
    startLine: 349,
    endLine: 349,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13403,
    endOffset: 13403,
    startLine: 350,
    endLine: 350,
    startColumn: 75,
    endColumn: 75,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13403,
    endOffset: 13403,
    startLine: 350,
    endLine: 350,
    startColumn: 75,
    endColumn: 75,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 13422,
    endOffset: 13422,
    startLine: 351,
    endLine: 351,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    image: '.',
    startOffset: 13422,
    endOffset: 13422,
    startLine: 351,
    endLine: 351,
    startColumn: 18,
    endColumn: 18,
    tokenTypeIdx: 157,
    tokenType: {
      PATTERN: '.',
      tokenTypeIdx: 157,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Period',
      isParent: false
    }
  },
  parentCtx: { node: { name: 'statement', children: [Object] }, parentCtx: {} }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { subject: [Array], predicateObjectList: [Array] }
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: { name: 'subject', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'subject', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresShape>',
    startOffset: 13425,
    endOffset: 13483,
    startLine: 353,
    endLine: 353,
    startColumn: 1,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/shacl/adresregister#AdresShape>',
    startOffset: 13425,
    endOffset: 13483,
    startLine: 353,
    endLine: 353,
    startColumn: 1,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: { shaclRulePredicateObjectList: [Array], Semicolon: [Array] }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclVerbShape: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclVerbShape',
    children: { verb: [Array], shaclShapeType: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { A: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 13486,
    endOffset: 13486,
    startLine: 354,
    endLine: 354,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'a',
    startOffset: 13486,
    endOffset: 13486,
    startLine: 354,
    endLine: 354,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 38,
    tokenType: {
      PATTERN: /a/,
      tokenTypeIdx: 38,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'A',
      isParent: false,
      LONGER_ALT: [Object]
    }
  },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShapeType', children: { SHACL_NodeShape: [Array] } },
  parentCtx: {
    node: { name: 'shaclVerbShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 13488,
    endOffset: 13499,
    startLine: 354,
    endLine: 354,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:NodeShape',
    startOffset: 13488,
    endOffset: 13499,
    startLine: 354,
    endLine: 354,
    startColumn: 4,
    endColumn: 15,
    tokenTypeIdx: 511,
    tokenType: {
      PATTERN: 'sh:NodeShape',
      CATEGORIES: [Array],
      tokenTypeIdx: 511,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_NodeShape_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeType', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { ManyIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 13504,
    endOffset: 13517,
    startLine: 355,
    endLine: 355,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:targetClass',
    startOffset: 13504,
    endOffset: 13517,
    startLine: 355,
    endLine: 355,
    startColumn: 2,
    endColumn: 15,
    tokenTypeIdx: 466,
    tokenType: {
      PATTERN: 'sh:targetClass',
      CATEGORIES: [Array],
      tokenTypeIdx: 466,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_targetClass_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres> ',
    startOffset: 13519,
    endOffset: 13562,
    startLine: 355,
    endLine: 355,
    startColumn: 17,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres> ',
    startOffset: 13519,
    endOffset: 13562,
    startLine: 355,
    endLine: 355,
    startColumn: 17,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 13566,
    endOffset: 13576,
    startLine: 356,
    endLine: 356,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 13566,
    endOffset: 13576,
    startLine: 356,
    endLine: 356,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 13578,
    endOffset: 13578,
    startLine: 356,
    endLine: 356,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 13578,
    endOffset: 13578,
    startLine: 356,
    endLine: 356,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 13582,
    endOffset: 13588,
    startLine: 357,
    endLine: 357,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 13582,
    endOffset: 13588,
    startLine: 357,
    endLine: 357,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 13611,
    endOffset: 13624,
    startLine: 358,
    endLine: 358,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 13611,
    endOffset: 13624,
    startLine: 358,
    endLine: 358,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendAan"',
    startOffset: 13590,
    endOffset: 13605,
    startLine: 357,
    endLine: 357,
    startColumn: 11,
    endColumn: 26,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendAan"',
    startOffset: 13590,
    endOffset: 13605,
    startLine: 357,
    endLine: 357,
    startColumn: 11,
    endColumn: 26,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Adresseerbaar object waaraan het adres is toegekend."',
    startOffset: 13626,
    endOffset: 13679,
    startLine: 358,
    endLine: 358,
    startColumn: 18,
    endColumn: 71,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Adresseerbaar object waaraan het adres is toegekend."',
    startOffset: 13626,
    endOffset: 13679,
    startLine: 358,
    endLine: 358,
    startColumn: 18,
    endColumn: 71,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13607,
    endOffset: 13607,
    startLine: 357,
    endLine: 357,
    startColumn: 28,
    endColumn: 28,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13607,
    endOffset: 13607,
    startLine: 357,
    endLine: 357,
    startColumn: 28,
    endColumn: 28,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13681,
    endOffset: 13681,
    startLine: 358,
    endLine: 358,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13681,
    endOffset: 13681,
    startLine: 358,
    endLine: 358,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13746,
    endOffset: 13746,
    startLine: 359,
    endLine: 359,
    startColumn: 64,
    endColumn: 64,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13746,
    endOffset: 13746,
    startLine: 359,
    endLine: 359,
    startColumn: 64,
    endColumn: 64,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13817,
    endOffset: 13817,
    startLine: 360,
    endLine: 360,
    startColumn: 70,
    endColumn: 70,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13817,
    endOffset: 13817,
    startLine: 360,
    endLine: 360,
    startColumn: 70,
    endColumn: 70,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13685,
    endOffset: 13691,
    startLine: 359,
    endLine: 359,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13685,
    endOffset: 13691,
    startLine: 359,
    endLine: 359,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isToegekendAan> ',
    startOffset: 13693,
    endOffset: 13745,
    startLine: 359,
    endLine: 359,
    startColumn: 11,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isToegekendAan> ',
    startOffset: 13693,
    endOffset: 13745,
    startLine: 359,
    endLine: 359,
    startColumn: 11,
    endColumn: 63,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13750,
    endOffset: 13757,
    startLine: 360,
    endLine: 360,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13750,
    endOffset: 13757,
    startLine: 360,
    endLine: 360,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#AdresseerbaarObject> ',
    startOffset: 13759,
    endOffset: 13816,
    startLine: 360,
    endLine: 360,
    startColumn: 12,
    endColumn: 69,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#AdresseerbaarObject> ',
    startOffset: 13759,
    endOffset: 13816,
    startLine: 360,
    endLine: 360,
    startColumn: 12,
    endColumn: 69,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 13820,
    endOffset: 13820,
    startLine: 361,
    endLine: 361,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 13820,
    endOffset: 13820,
    startLine: 361,
    endLine: 361,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 13825,
    endOffset: 13835,
    startLine: 362,
    endLine: 362,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 13825,
    endOffset: 13835,
    startLine: 362,
    endLine: 362,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 13837,
    endOffset: 13837,
    startLine: 362,
    endLine: 362,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 13837,
    endOffset: 13837,
    startLine: 362,
    endLine: 362,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 13841,
    endOffset: 13847,
    startLine: 363,
    endLine: 363,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 13841,
    endOffset: 13847,
    startLine: 363,
    endLine: 363,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 13873,
    endOffset: 13886,
    startLine: 364,
    endLine: 364,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 13873,
    endOffset: 13886,
    startLine: 364,
    endLine: 364,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftGemeentenaam"',
    startOffset: 13849,
    endOffset: 13867,
    startLine: 363,
    endLine: 363,
    startColumn: 11,
    endColumn: 29,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftGemeentenaam"',
    startOffset: 13849,
    endOffset: 13867,
    startLine: 363,
    endLine: 363,
    startColumn: 11,
    endColumn: 29,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeentenaamcomponent van het adres."',
    startOffset: 13888,
    endOffset: 13925,
    startLine: 364,
    endLine: 364,
    startColumn: 18,
    endColumn: 55,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Gemeentenaamcomponent van het adres."',
    startOffset: 13888,
    endOffset: 13925,
    startLine: 364,
    endLine: 364,
    startColumn: 18,
    endColumn: 55,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13869,
    endOffset: 13869,
    startLine: 363,
    endLine: 363,
    startColumn: 31,
    endColumn: 31,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13869,
    endOffset: 13869,
    startLine: 363,
    endLine: 363,
    startColumn: 31,
    endColumn: 31,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13927,
    endOffset: 13927,
    startLine: 364,
    endLine: 364,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13927,
    endOffset: 13927,
    startLine: 364,
    endLine: 364,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13995,
    endOffset: 13995,
    startLine: 365,
    endLine: 365,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13995,
    endOffset: 13995,
    startLine: 365,
    endLine: 365,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14059,
    endOffset: 14059,
    startLine: 366,
    endLine: 366,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14059,
    endOffset: 14059,
    startLine: 366,
    endLine: 366,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14077,
    endOffset: 14077,
    startLine: 367,
    endLine: 367,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14077,
    endOffset: 14077,
    startLine: 367,
    endLine: 367,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14095,
    endOffset: 14095,
    startLine: 368,
    endLine: 368,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14095,
    endOffset: 14095,
    startLine: 368,
    endLine: 368,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13931,
    endOffset: 13937,
    startLine: 365,
    endLine: 365,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 13931,
    endOffset: 13937,
    startLine: 365,
    endLine: 365,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftGemeentenaam> ',
    startOffset: 13939,
    endOffset: 13994,
    startLine: 365,
    endLine: 365,
    startColumn: 11,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftGemeentenaam> ',
    startOffset: 13939,
    endOffset: 13994,
    startLine: 365,
    endLine: 365,
    startColumn: 11,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13999,
    endOffset: 14006,
    startLine: 366,
    endLine: 366,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 13999,
    endOffset: 14006,
    startLine: 366,
    endLine: 366,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Gemeentenaam> ',
    startOffset: 14008,
    endOffset: 14058,
    startLine: 366,
    endLine: 366,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Gemeentenaam> ',
    startOffset: 14008,
    endOffset: 14058,
    startLine: 366,
    endLine: 366,
    startColumn: 12,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14063,
    endOffset: 14073,
    startLine: 367,
    endLine: 367,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14063,
    endOffset: 14073,
    startLine: 367,
    endLine: 367,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14075,
    endOffset: 14075,
    startLine: 367,
    endLine: 367,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14075,
    endOffset: 14075,
    startLine: 367,
    endLine: 367,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14081,
    endOffset: 14091,
    startLine: 368,
    endLine: 368,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14081,
    endOffset: 14091,
    startLine: 368,
    endLine: 368,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14093,
    endOffset: 14093,
    startLine: 368,
    endLine: 368,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14093,
    endOffset: 14093,
    startLine: 368,
    endLine: 368,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14098,
    endOffset: 14098,
    startLine: 369,
    endLine: 369,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14098,
    endOffset: 14098,
    startLine: 369,
    endLine: 369,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14103,
    endOffset: 14113,
    startLine: 370,
    endLine: 370,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14103,
    endOffset: 14113,
    startLine: 370,
    endLine: 370,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14115,
    endOffset: 14115,
    startLine: 370,
    endLine: 370,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14115,
    endOffset: 14115,
    startLine: 370,
    endLine: 370,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14119,
    endOffset: 14125,
    startLine: 371,
    endLine: 371,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14119,
    endOffset: 14125,
    startLine: 371,
    endLine: 371,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14147,
    endOffset: 14160,
    startLine: 372,
    endLine: 372,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14147,
    endOffset: 14160,
    startLine: 372,
    endLine: 372,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftPostinfo"',
    startOffset: 14127,
    endOffset: 14141,
    startLine: 371,
    endLine: 371,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftPostinfo"',
    startOffset: 14127,
    endOffset: 14141,
    startLine: 371,
    endLine: 371,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Postinfocomponent van het adres."',
    startOffset: 14162,
    endOffset: 14195,
    startLine: 372,
    endLine: 372,
    startColumn: 18,
    endColumn: 51,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Postinfocomponent van het adres."',
    startOffset: 14162,
    endOffset: 14195,
    startLine: 372,
    endLine: 372,
    startColumn: 18,
    endColumn: 51,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14143,
    endOffset: 14143,
    startLine: 371,
    endLine: 371,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14143,
    endOffset: 14143,
    startLine: 371,
    endLine: 371,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14197,
    endOffset: 14197,
    startLine: 372,
    endLine: 372,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14197,
    endOffset: 14197,
    startLine: 372,
    endLine: 372,
    startColumn: 53,
    endColumn: 53,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14261,
    endOffset: 14261,
    startLine: 373,
    endLine: 373,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14261,
    endOffset: 14261,
    startLine: 373,
    endLine: 373,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14321,
    endOffset: 14321,
    startLine: 374,
    endLine: 374,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14321,
    endOffset: 14321,
    startLine: 374,
    endLine: 374,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14339,
    endOffset: 14339,
    startLine: 375,
    endLine: 375,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14339,
    endOffset: 14339,
    startLine: 375,
    endLine: 375,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14357,
    endOffset: 14357,
    startLine: 376,
    endLine: 376,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14357,
    endOffset: 14357,
    startLine: 376,
    endLine: 376,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14201,
    endOffset: 14207,
    startLine: 373,
    endLine: 373,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14201,
    endOffset: 14207,
    startLine: 373,
    endLine: 373,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftPostinfo> ',
    startOffset: 14209,
    endOffset: 14260,
    startLine: 373,
    endLine: 373,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftPostinfo> ',
    startOffset: 14209,
    endOffset: 14260,
    startLine: 373,
    endLine: 373,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14265,
    endOffset: 14272,
    startLine: 374,
    endLine: 374,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14265,
    endOffset: 14272,
    startLine: 374,
    endLine: 374,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Postinfo> ',
    startOffset: 14274,
    endOffset: 14320,
    startLine: 374,
    endLine: 374,
    startColumn: 12,
    endColumn: 58,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Postinfo> ',
    startOffset: 14274,
    endOffset: 14320,
    startLine: 374,
    endLine: 374,
    startColumn: 12,
    endColumn: 58,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14325,
    endOffset: 14335,
    startLine: 375,
    endLine: 375,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14325,
    endOffset: 14335,
    startLine: 375,
    endLine: 375,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14337,
    endOffset: 14337,
    startLine: 375,
    endLine: 375,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14337,
    endOffset: 14337,
    startLine: 375,
    endLine: 375,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14343,
    endOffset: 14353,
    startLine: 376,
    endLine: 376,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14343,
    endOffset: 14353,
    startLine: 376,
    endLine: 376,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14355,
    endOffset: 14355,
    startLine: 376,
    endLine: 376,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14355,
    endOffset: 14355,
    startLine: 376,
    endLine: 376,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14360,
    endOffset: 14360,
    startLine: 377,
    endLine: 377,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14360,
    endOffset: 14360,
    startLine: 377,
    endLine: 377,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14365,
    endOffset: 14375,
    startLine: 378,
    endLine: 378,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14365,
    endOffset: 14375,
    startLine: 378,
    endLine: 378,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14377,
    endOffset: 14377,
    startLine: 378,
    endLine: 378,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14377,
    endOffset: 14377,
    startLine: 378,
    endLine: 378,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14381,
    endOffset: 14387,
    startLine: 379,
    endLine: 379,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14381,
    endOffset: 14387,
    startLine: 379,
    endLine: 379,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14409,
    endOffset: 14422,
    startLine: 380,
    endLine: 380,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14409,
    endOffset: 14422,
    startLine: 380,
    endLine: 380,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isVerrijktMet"',
    startOffset: 14389,
    endOffset: 14403,
    startLine: 379,
    endLine: 379,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isVerrijktMet"',
    startOffset: 14389,
    endOffset: 14403,
    startLine: 379,
    endLine: 379,
    startColumn: 11,
    endColumn: 25,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Verwijzing naar een adresuitbreiding. "',
    startOffset: 14424,
    endOffset: 14463,
    startLine: 380,
    endLine: 380,
    startColumn: 18,
    endColumn: 57,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Verwijzing naar een adresuitbreiding. "',
    startOffset: 14424,
    endOffset: 14463,
    startLine: 380,
    endLine: 380,
    startColumn: 18,
    endColumn: 57,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14405,
    endOffset: 14405,
    startLine: 379,
    endLine: 379,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14405,
    endOffset: 14405,
    startLine: 379,
    endLine: 379,
    startColumn: 27,
    endColumn: 27,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14465,
    endOffset: 14465,
    startLine: 380,
    endLine: 380,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14465,
    endOffset: 14465,
    startLine: 380,
    endLine: 380,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14529,
    endOffset: 14529,
    startLine: 381,
    endLine: 381,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14529,
    endOffset: 14529,
    startLine: 381,
    endLine: 381,
    startColumn: 63,
    endColumn: 63,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14597,
    endOffset: 14597,
    startLine: 382,
    endLine: 382,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14597,
    endOffset: 14597,
    startLine: 382,
    endLine: 382,
    startColumn: 67,
    endColumn: 67,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14615,
    endOffset: 14615,
    startLine: 383,
    endLine: 383,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14615,
    endOffset: 14615,
    startLine: 383,
    endLine: 383,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14469,
    endOffset: 14475,
    startLine: 381,
    endLine: 381,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14469,
    endOffset: 14475,
    startLine: 381,
    endLine: 381,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isVerrijktMet> ',
    startOffset: 14477,
    endOffset: 14528,
    startLine: 381,
    endLine: 381,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#isVerrijktMet> ',
    startOffset: 14477,
    endOffset: 14528,
    startLine: 381,
    endLine: 381,
    startColumn: 11,
    endColumn: 62,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14533,
    endOffset: 14540,
    startLine: 382,
    endLine: 382,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14533,
    endOffset: 14540,
    startLine: 382,
    endLine: 382,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresuitbreiding> ',
    startOffset: 14542,
    endOffset: 14596,
    startLine: 382,
    endLine: 382,
    startColumn: 12,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adresuitbreiding> ',
    startOffset: 14542,
    endOffset: 14596,
    startLine: 382,
    endLine: 382,
    startColumn: 12,
    endColumn: 66,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14601,
    endOffset: 14611,
    startLine: 383,
    endLine: 383,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14601,
    endOffset: 14611,
    startLine: 383,
    endLine: 383,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14613,
    endOffset: 14613,
    startLine: 383,
    endLine: 383,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14613,
    endOffset: 14613,
    startLine: 383,
    endLine: 383,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14618,
    endOffset: 14618,
    startLine: 384,
    endLine: 384,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14618,
    endOffset: 14618,
    startLine: 384,
    endLine: 384,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14623,
    endOffset: 14633,
    startLine: 385,
    endLine: 385,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14623,
    endOffset: 14633,
    startLine: 385,
    endLine: 385,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14635,
    endOffset: 14635,
    startLine: 385,
    endLine: 385,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14635,
    endOffset: 14635,
    startLine: 385,
    endLine: 385,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14639,
    endOffset: 14645,
    startLine: 386,
    endLine: 386,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14639,
    endOffset: 14645,
    startLine: 386,
    endLine: 386,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14669,
    endOffset: 14682,
    startLine: 387,
    endLine: 387,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14669,
    endOffset: 14682,
    startLine: 387,
    endLine: 387,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftStraatnaam"',
    startOffset: 14647,
    endOffset: 14663,
    startLine: 386,
    endLine: 386,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"heeftStraatnaam"',
    startOffset: 14647,
    endOffset: 14663,
    startLine: 386,
    endLine: 386,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Straatnaamcomponent van het adres."',
    startOffset: 14684,
    endOffset: 14719,
    startLine: 387,
    endLine: 387,
    startColumn: 18,
    endColumn: 53,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Straatnaamcomponent van het adres."',
    startOffset: 14684,
    endOffset: 14719,
    startLine: 387,
    endLine: 387,
    startColumn: 18,
    endColumn: 53,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14665,
    endOffset: 14665,
    startLine: 386,
    endLine: 386,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14665,
    endOffset: 14665,
    startLine: 386,
    endLine: 386,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14721,
    endOffset: 14721,
    startLine: 387,
    endLine: 387,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14721,
    endOffset: 14721,
    startLine: 387,
    endLine: 387,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14787,
    endOffset: 14787,
    startLine: 388,
    endLine: 388,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14787,
    endOffset: 14787,
    startLine: 388,
    endLine: 388,
    startColumn: 65,
    endColumn: 65,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14849,
    endOffset: 14849,
    startLine: 389,
    endLine: 389,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14849,
    endOffset: 14849,
    startLine: 389,
    endLine: 389,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14867,
    endOffset: 14867,
    startLine: 390,
    endLine: 390,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14867,
    endOffset: 14867,
    startLine: 390,
    endLine: 390,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14885,
    endOffset: 14885,
    startLine: 391,
    endLine: 391,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14885,
    endOffset: 14885,
    startLine: 391,
    endLine: 391,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14725,
    endOffset: 14731,
    startLine: 388,
    endLine: 388,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14725,
    endOffset: 14731,
    startLine: 388,
    endLine: 388,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftStraatnaam> ',
    startOffset: 14733,
    endOffset: 14786,
    startLine: 388,
    endLine: 388,
    startColumn: 11,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#heeftStraatnaam> ',
    startOffset: 14733,
    endOffset: 14786,
    startLine: 388,
    endLine: 388,
    startColumn: 11,
    endColumn: 64,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14791,
    endOffset: 14798,
    startLine: 389,
    endLine: 389,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 14791,
    endOffset: 14798,
    startLine: 389,
    endLine: 389,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam> ',
    startOffset: 14800,
    endOffset: 14848,
    startLine: 389,
    endLine: 389,
    startColumn: 12,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Straatnaam> ',
    startOffset: 14800,
    endOffset: 14848,
    startLine: 389,
    endLine: 389,
    startColumn: 12,
    endColumn: 60,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14853,
    endOffset: 14863,
    startLine: 390,
    endLine: 390,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 14853,
    endOffset: 14863,
    startLine: 390,
    endLine: 390,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14865,
    endOffset: 14865,
    startLine: 390,
    endLine: 390,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14865,
    endOffset: 14865,
    startLine: 390,
    endLine: 390,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14871,
    endOffset: 14881,
    startLine: 391,
    endLine: 391,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 14871,
    endOffset: 14881,
    startLine: 391,
    endLine: 391,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14883,
    endOffset: 14883,
    startLine: 391,
    endLine: 391,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 14883,
    endOffset: 14883,
    startLine: 391,
    endLine: 391,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14888,
    endOffset: 14888,
    startLine: 392,
    endLine: 392,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 14888,
    endOffset: 14888,
    startLine: 392,
    endLine: 392,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14893,
    endOffset: 14903,
    startLine: 393,
    endLine: 393,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 14893,
    endOffset: 14903,
    startLine: 393,
    endLine: 393,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclShape', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'shaclShapeExpectingConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14905,
    endOffset: 14905,
    startLine: 393,
    endLine: 393,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 14905,
    endOffset: 14905,
    startLine: 393,
    endLine: 393,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14909,
    endOffset: 14915,
    startLine: 394,
    endLine: 394,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 14909,
    endOffset: 14915,
    startLine: 394,
    endLine: 394,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14939,
    endOffset: 14952,
    startLine: 395,
    endLine: 395,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 14939,
    endOffset: 14952,
    startLine: 395,
    endLine: 395,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendDoor"',
    startOffset: 14917,
    endOffset: 14933,
    startLine: 394,
    endLine: 394,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"isToegekendDoor"',
    startOffset: 14917,
    endOffset: 14933,
    startLine: 394,
    endLine: 394,
    startColumn: 11,
    endColumn: 27,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Agent die het adres heeft toegekend."',
    startOffset: 14954,
    endOffset: 14991,
    startLine: 395,
    endLine: 395,
    startColumn: 18,
    endColumn: 55,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Agent die het adres heeft toegekend."',
    startOffset: 14954,
    endOffset: 14991,
    startLine: 395,
    endLine: 395,
    startColumn: 18,
    endColumn: 55,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14935,
    endOffset: 14935,
    startLine: 394,
    endLine: 394,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14935,
    endOffset: 14935,
    startLine: 394,
    endLine: 394,
    startColumn: 29,
    endColumn: 29,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14993,
    endOffset: 14993,
    startLine: 395,
    endLine: 395,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14993,
    endOffset: 14993,
    startLine: 395,
    endLine: 395,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15049,
    endOffset: 15049,
    startLine: 396,
    endLine: 396,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15049,
    endOffset: 15049,
    startLine: 396,
    endLine: 396,
    startColumn: 55,
    endColumn: 55,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15112,
    endOffset: 15112,
    startLine: 397,
    endLine: 397,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15112,
    endOffset: 15112,
    startLine: 397,
    endLine: 397,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15130,
    endOffset: 15130,
    startLine: 398,
    endLine: 398,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15130,
    endOffset: 15130,
    startLine: 398,
    endLine: 398,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15148,
    endOffset: 15148,
    startLine: 399,
    endLine: 399,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15148,
    endOffset: 15148,
    startLine: 399,
    endLine: 399,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14997,
    endOffset: 15003,
    startLine: 396,
    endLine: 396,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 14997,
    endOffset: 15003,
    startLine: 396,
    endLine: 396,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/prov#wasAttributedTo> ',
    startOffset: 15005,
    endOffset: 15048,
    startLine: 396,
    endLine: 396,
    startColumn: 11,
    endColumn: 54,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/ns/prov#wasAttributedTo> ',
    startOffset: 15005,
    endOffset: 15048,
    startLine: 396,
    endLine: 396,
    startColumn: 11,
    endColumn: 54,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 15053,
    endOffset: 15060,
    startLine: 397,
    endLine: 397,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 15053,
    endOffset: 15060,
    startLine: 397,
    endLine: 397,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 15062,
    endOffset: 15111,
    startLine: 397,
    endLine: 397,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#Gemeente> ',
    startOffset: 15062,
    endOffset: 15111,
    startLine: 397,
    endLine: 397,
    startColumn: 12,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 15116,
    endOffset: 15126,
    startLine: 398,
    endLine: 398,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 15116,
    endOffset: 15126,
    startLine: 398,
    endLine: 398,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15128,
    endOffset: 15128,
    startLine: 398,
    endLine: 398,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15128,
    endOffset: 15128,
    startLine: 398,
    endLine: 398,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 15134,
    endOffset: 15144,
    startLine: 399,
    endLine: 399,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 15134,
    endOffset: 15144,
    startLine: 399,
    endLine: 399,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15146,
    endOffset: 15146,
    startLine: 399,
    endLine: 399,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15146,
    endOffset: 15146,
    startLine: 399,
    endLine: 399,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 15151,
    endOffset: 15151,
    startLine: 400,
    endLine: 400,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 15151,
    endOffset: 15151,
    startLine: 400,
    endLine: 400,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclShapeExpectingConstraint: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShapeExpectingConstraint',
    children: { ShapeExpectingPredicate: [Array], shaclShape: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclRulePredicateObjectList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 15156,
    endOffset: 15166,
    startLine: 401,
    endLine: 401,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:property',
    startOffset: 15156,
    endOffset: 15166,
    startLine: 401,
    endLine: 401,
    startColumn: 2,
    endColumn: 12,
    tokenTypeIdx: 497,
    tokenType: {
      PATTERN: 'sh:property',
      CATEGORIES: [Array],
      tokenTypeIdx: 497,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_property_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclShape',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: {
      name: 'shaclShapeExpectingConstraint',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'shaclShape', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15168,
    endOffset: 15168,
    startLine: 401,
    endLine: 401,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15168,
    endOffset: 15168,
    startLine: 401,
    endLine: 401,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15172,
    endOffset: 15178,
    startLine: 402,
    endLine: 402,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15172,
    endOffset: 15178,
    startLine: 402,
    endLine: 402,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15197,
    endOffset: 15210,
    startLine: 403,
    endLine: 403,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15197,
    endOffset: 15210,
    startLine: 403,
    endLine: 403,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"huisnummer"',
    startOffset: 15180,
    endOffset: 15191,
    startLine: 402,
    endLine: 402,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"huisnummer"',
    startOffset: 15180,
    endOffset: 15191,
    startLine: 402,
    endLine: 402,
    startColumn: 11,
    endColumn: 22,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code officieel toegekend aan gebouweenheden, ligplaatsen, standplaatsen of percelen."',
    startOffset: 15212,
    endOffset: 15311,
    startLine: 403,
    endLine: 403,
    startColumn: 18,
    endColumn: 117,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Alfanumerieke code officieel toegekend aan gebouweenheden, ligplaatsen, standplaatsen of percelen."',
    startOffset: 15212,
    endOffset: 15311,
    startLine: 403,
    endLine: 403,
    startColumn: 18,
    endColumn: 117,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15193,
    endOffset: 15193,
    startLine: 402,
    endLine: 402,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15193,
    endOffset: 15193,
    startLine: 402,
    endLine: 402,
    startColumn: 24,
    endColumn: 24,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15313,
    endOffset: 15313,
    startLine: 403,
    endLine: 403,
    startColumn: 119,
    endColumn: 119,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15313,
    endOffset: 15313,
    startLine: 403,
    endLine: 403,
    startColumn: 119,
    endColumn: 119,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15374,
    endOffset: 15374,
    startLine: 404,
    endLine: 404,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15374,
    endOffset: 15374,
    startLine: 404,
    endLine: 404,
    startColumn: 60,
    endColumn: 60,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 15317,
    endOffset: 15323,
    startLine: 404,
    endLine: 404,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 15317,
    endOffset: 15323,
    startLine: 404,
    endLine: 404,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#huisnummer> ',
    startOffset: 15325,
    endOffset: 15373,
    startLine: 404,
    endLine: 404,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#huisnummer> ',
    startOffset: 15325,
    endOffset: 15373,
    startLine: 404,
    endLine: 404,
    startColumn: 11,
    endColumn: 59,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 15378,
    endOffset: 15388,
    startLine: 405,
    endLine: 405,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 15378,
    endOffset: 15388,
    startLine: 405,
    endLine: 405,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 15390,
    endOffset: 15429,
    startLine: 405,
    endLine: 405,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 15390,
    endOffset: 15429,
    startLine: 405,
    endLine: 405,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 15436,
    endOffset: 15446,
    startLine: 406,
    endLine: 406,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 15436,
    endOffset: 15446,
    startLine: 406,
    endLine: 406,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15448,
    endOffset: 15448,
    startLine: 406,
    endLine: 406,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15448,
    endOffset: 15448,
    startLine: 406,
    endLine: 406,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 15454,
    endOffset: 15464,
    startLine: 407,
    endLine: 407,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 15454,
    endOffset: 15464,
    startLine: 407,
    endLine: 407,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15466,
    endOffset: 15466,
    startLine: 407,
    endLine: 407,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 15466,
    endOffset: 15466,
    startLine: 407,
    endLine: 407,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13501,
    endOffset: 13501,
    startLine: 354,
    endLine: 354,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13501,
    endOffset: 13501,
    startLine: 354,
    endLine: 354,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13563,
    endOffset: 13563,
    startLine: 355,
    endLine: 355,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13563,
    endOffset: 13563,
    startLine: 355,
    endLine: 355,
    startColumn: 61,
    endColumn: 61,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13822,
    endOffset: 13822,
    startLine: 361,
    endLine: 361,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 13822,
    endOffset: 13822,
    startLine: 361,
    endLine: 361,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14100,
    endOffset: 14100,
    startLine: 369,
    endLine: 369,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14100,
    endOffset: 14100,
    startLine: 369,
    endLine: 369,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14362,
    endOffset: 14362,
    startLine: 377,
    endLine: 377,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14362,
    endOffset: 14362,
    startLine: 377,
    endLine: 377,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14620,
    endOffset: 14620,
    startLine: 384,
    endLine: 384,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14620,
    endOffset: 14620,
    startLine: 384,
    endLine: 384,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14890,
    endOffset: 14890,
    startLine: 392,
    endLine: 392,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 14890,
    endOffset: 14890,
    startLine: 392,
    endLine: 392,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15153,
    endOffset: 15153,
    startLine: 400,
    endLine: 400,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15153,
    endOffset: 15153,
    startLine: 400,
    endLine: 400,
    startColumn: 4,
    endColumn: 4,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15432,
    endOffset: 15432,
    startLine: 405,
    endLine: 405,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15432,
    endOffset: 15432,
    startLine: 405,
    endLine: 405,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15450,
    endOffset: 15450,
    startLine: 406,
    endLine: 406,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15450,
    endOffset: 15450,
    startLine: 406,
    endLine: 406,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15468,
    endOffset: 15468,
    startLine: 407,
    endLine: 407,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15468,
    endOffset: 15468,
    startLine: 407,
    endLine: 407,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15488,
    endOffset: 15488,
    startLine: 409,
    endLine: 409,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15488,
    endOffset: 15488,
    startLine: 409,
    endLine: 409,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15492,
    endOffset: 15498,
    startLine: 410,
    endLine: 410,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15492,
    endOffset: 15498,
    startLine: 410,
    endLine: 410,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15516,
    endOffset: 15529,
    startLine: 411,
    endLine: 411,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15516,
    endOffset: 15529,
    startLine: 411,
    endLine: 411,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"busnummer"',
    startOffset: 15500,
    endOffset: 15510,
    startLine: 410,
    endLine: 410,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"busnummer"',
    startOffset: 15500,
    endOffset: 15510,
    startLine: 410,
    endLine: 410,
    startColumn: 11,
    endColumn: 21,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Officieel toegekende alfanumerieke code die wordt toegevoegd aan het huisnummer om meerdere gebouweenheden, standplaatsen, ligplaatsen of percelen te onderscheiden die eenzelfde huisnummer hebben."',
    startOffset: 15531,
    endOffset: 15728,
    startLine: 411,
    endLine: 411,
    startColumn: 18,
    endColumn: 215,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Officieel toegekende alfanumerieke code die wordt toegevoegd aan het huisnummer om meerdere gebouweenheden, standplaatsen, ligplaatsen of percelen te onderscheiden die eenzelfde huisnummer hebben."',
    startOffset: 15531,
    endOffset: 15728,
    startLine: 411,
    endLine: 411,
    startColumn: 18,
    endColumn: 215,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15512,
    endOffset: 15512,
    startLine: 410,
    endLine: 410,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15512,
    endOffset: 15512,
    startLine: 410,
    endLine: 410,
    startColumn: 23,
    endColumn: 23,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15730,
    endOffset: 15730,
    startLine: 411,
    endLine: 411,
    startColumn: 217,
    endColumn: 217,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15730,
    endOffset: 15730,
    startLine: 411,
    endLine: 411,
    startColumn: 217,
    endColumn: 217,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15790,
    endOffset: 15790,
    startLine: 412,
    endLine: 412,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15790,
    endOffset: 15790,
    startLine: 412,
    endLine: 412,
    startColumn: 59,
    endColumn: 59,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 15734,
    endOffset: 15740,
    startLine: 412,
    endLine: 412,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 15734,
    endOffset: 15740,
    startLine: 412,
    endLine: 412,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#busnummer> ',
    startOffset: 15742,
    endOffset: 15789,
    startLine: 412,
    endLine: 412,
    startColumn: 11,
    endColumn: 58,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#busnummer> ',
    startOffset: 15742,
    endOffset: 15789,
    startLine: 412,
    endLine: 412,
    startColumn: 11,
    endColumn: 58,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 15794,
    endOffset: 15804,
    startLine: 413,
    endLine: 413,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 15794,
    endOffset: 15804,
    startLine: 413,
    endLine: 413,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 15806,
    endOffset: 15845,
    startLine: 413,
    endLine: 413,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#string',
    startOffset: 15806,
    endOffset: 15845,
    startLine: 413,
    endLine: 413,
    startColumn: 15,
    endColumn: 54,
    tokenTypeIdx: 233,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#string',
      CATEGORIES: [Array],
      tokenTypeIdx: 233,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_string_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15886,
    endOffset: 15886,
    startLine: 416,
    endLine: 416,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 15886,
    endOffset: 15886,
    startLine: 416,
    endLine: 416,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15890,
    endOffset: 15896,
    startLine: 417,
    endLine: 417,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 15890,
    endOffset: 15896,
    startLine: 417,
    endLine: 417,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15912,
    endOffset: 15925,
    startLine: 418,
    endLine: 418,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 15912,
    endOffset: 15925,
    startLine: 418,
    endLine: 418,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"positie"',
    startOffset: 15898,
    endOffset: 15906,
    startLine: 417,
    endLine: 417,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"positie"',
    startOffset: 15898,
    endOffset: 15906,
    startLine: 417,
    endLine: 417,
    startColumn: 11,
    endColumn: 19,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Positie van een karakeristiek punt dat de positie van het adres vertegenwoordigt volgens een bepaalde specificatie en inclusief informatie over de herkomst van de positie."',
    startOffset: 15927,
    endOffset: 16099,
    startLine: 418,
    endLine: 418,
    startColumn: 18,
    endColumn: 190,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Positie van een karakeristiek punt dat de positie van het adres vertegenwoordigt volgens een bepaalde specificatie en inclusief informatie over de herkomst van de positie."',
    startOffset: 15927,
    endOffset: 16099,
    startLine: 418,
    endLine: 418,
    startColumn: 18,
    endColumn: 190,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15908,
    endOffset: 15908,
    startLine: 417,
    endLine: 417,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 15908,
    endOffset: 15908,
    startLine: 417,
    endLine: 417,
    startColumn: 21,
    endColumn: 21,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16101,
    endOffset: 16101,
    startLine: 418,
    endLine: 418,
    startColumn: 192,
    endColumn: 192,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16101,
    endOffset: 16101,
    startLine: 418,
    endLine: 418,
    startColumn: 192,
    endColumn: 192,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16159,
    endOffset: 16159,
    startLine: 419,
    endLine: 419,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16159,
    endOffset: 16159,
    startLine: 419,
    endLine: 419,
    startColumn: 57,
    endColumn: 57,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16233,
    endOffset: 16233,
    startLine: 420,
    endLine: 420,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16233,
    endOffset: 16233,
    startLine: 420,
    endLine: 420,
    startColumn: 73,
    endColumn: 73,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16251,
    endOffset: 16251,
    startLine: 421,
    endLine: 421,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16251,
    endOffset: 16251,
    startLine: 421,
    endLine: 421,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16269,
    endOffset: 16269,
    startLine: 422,
    endLine: 422,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16269,
    endOffset: 16269,
    startLine: 422,
    endLine: 422,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16105,
    endOffset: 16111,
    startLine: 419,
    endLine: 419,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16105,
    endOffset: 16111,
    startLine: 419,
    endLine: 419,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#positie> ',
    startOffset: 16113,
    endOffset: 16158,
    startLine: 419,
    endLine: 419,
    startColumn: 11,
    endColumn: 56,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#positie> ',
    startOffset: 16113,
    endOffset: 16158,
    startLine: 419,
    endLine: 419,
    startColumn: 11,
    endColumn: 56,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 16163,
    endOffset: 16170,
    startLine: 420,
    endLine: 420,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 16163,
    endOffset: 16170,
    startLine: 420,
    endLine: 420,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#GeografischePositie> ',
    startOffset: 16172,
    endOffset: 16232,
    startLine: 420,
    endLine: 420,
    startColumn: 12,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/generiek#GeografischePositie> ',
    startOffset: 16172,
    endOffset: 16232,
    startLine: 420,
    endLine: 420,
    startColumn: 12,
    endColumn: 72,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 16237,
    endOffset: 16247,
    startLine: 421,
    endLine: 421,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 16237,
    endOffset: 16247,
    startLine: 421,
    endLine: 421,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16249,
    endOffset: 16249,
    startLine: 421,
    endLine: 421,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16249,
    endOffset: 16249,
    startLine: 421,
    endLine: 421,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 16255,
    endOffset: 16265,
    startLine: 422,
    endLine: 422,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 16255,
    endOffset: 16265,
    startLine: 422,
    endLine: 422,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16267,
    endOffset: 16267,
    startLine: 422,
    endLine: 422,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16267,
    endOffset: 16267,
    startLine: 422,
    endLine: 422,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 16272,
    endOffset: 16272,
    startLine: 423,
    endLine: 423,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 16272,
    endOffset: 16272,
    startLine: 423,
    endLine: 423,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: {
    name: 'triples',
    children: { blankNodePropertyList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: { LBracket: [Array], predicateObjectList: [Array] },
    recoveredNode: true
  },
  parentCtx: {
    node: { name: 'triples', children: [Object], recoveredNode: true },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 16289,
    endOffset: 16289,
    startLine: 424,
    endLine: 424,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 16289,
    endOffset: 16289,
    startLine: 424,
    endLine: 424,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: {
      name: 'blankNodePropertyList',
      children: [Object],
      recoveredNode: true
    },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 16293,
    endOffset: 16299,
    startLine: 425,
    endLine: 425,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 16293,
    endOffset: 16299,
    startLine: 425,
    endLine: 425,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 16326,
    endOffset: 16339,
    startLine: 426,
    endLine: 426,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 16326,
    endOffset: 16339,
    startLine: 426,
    endLine: 426,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"officieelToegekend"',
    startOffset: 16301,
    endOffset: 16320,
    startLine: 425,
    endLine: 425,
    startColumn: 11,
    endColumn: 30,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"officieelToegekend"',
    startOffset: 16301,
    endOffset: 16320,
    startLine: 425,
    endLine: 425,
    startColumn: 11,
    endColumn: 30,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geeft aan of het adres officieel door de adresbeheerder is toegekend."',
    startOffset: 16341,
    endOffset: 16411,
    startLine: 426,
    endLine: 426,
    startColumn: 18,
    endColumn: 88,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Geeft aan of het adres officieel door de adresbeheerder is toegekend."',
    startOffset: 16341,
    endOffset: 16411,
    startLine: 426,
    endLine: 426,
    startColumn: 18,
    endColumn: 88,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16322,
    endOffset: 16322,
    startLine: 425,
    endLine: 425,
    startColumn: 32,
    endColumn: 32,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16322,
    endOffset: 16322,
    startLine: 425,
    endLine: 425,
    startColumn: 32,
    endColumn: 32,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16413,
    endOffset: 16413,
    startLine: 426,
    endLine: 426,
    startColumn: 90,
    endColumn: 90,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16413,
    endOffset: 16413,
    startLine: 426,
    endLine: 426,
    startColumn: 90,
    endColumn: 90,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16482,
    endOffset: 16482,
    startLine: 427,
    endLine: 427,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16482,
    endOffset: 16482,
    startLine: 427,
    endLine: 427,
    startColumn: 68,
    endColumn: 68,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16417,
    endOffset: 16423,
    startLine: 427,
    endLine: 427,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16417,
    endOffset: 16423,
    startLine: 427,
    endLine: 427,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#officieelToegekend> ',
    startOffset: 16425,
    endOffset: 16481,
    startLine: 427,
    endLine: 427,
    startColumn: 11,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#officieelToegekend> ',
    startOffset: 16425,
    endOffset: 16481,
    startLine: 427,
    endLine: 427,
    startColumn: 11,
    endColumn: 67,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 16486,
    endOffset: 16496,
    startLine: 428,
    endLine: 428,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:datatype',
    startOffset: 16486,
    endOffset: 16496,
    startLine: 428,
    endLine: 428,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 470,
    tokenType: {
      PATTERN: 'sh:datatype',
      CATEGORIES: [Array],
      tokenTypeIdx: 470,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_datatype_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#boolean',
    startOffset: 16498,
    endOffset: 16538,
    startLine: 428,
    endLine: 428,
    startColumn: 15,
    endColumn: 55,
    tokenTypeIdx: 229,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#boolean',
      CATEGORIES: [Array],
      tokenTypeIdx: 229,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_boolean_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2001/XMLSchema#boolean',
    startOffset: 16498,
    endOffset: 16538,
    startLine: 428,
    endLine: 428,
    startColumn: 15,
    endColumn: 55,
    tokenTypeIdx: 229,
    tokenType: {
      PATTERN: '<http://www.w3.org/2001/XMLSchema#boolean',
      CATEGORIES: [Array],
      tokenTypeIdx: 229,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_xsd_boolean_IRI',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'statement',
    children: { triples: [Array] },
    recoveredNode: true
  },
  parentCtx: {}
}
>> SUB {
  node: { name: 'triples', children: { blankNodePropertyList: [Array] } },
  parentCtx: {
    node: { name: 'statement', children: [Object], recoveredNode: true },
    parentCtx: {}
  }
}
>> SUB {
  node: {
    name: 'blankNodePropertyList',
    children: {
      LBracket: [Array],
      predicateObjectList: [Array],
      RBracket: [Array]
    }
  },
  parentCtx: {
    node: { name: 'triples', children: [Object] },
    parentCtx: { node: [Object], parentCtx: {} }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 16597,
    endOffset: 16597,
    startLine: 432,
    endLine: 432,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '[',
    startOffset: 16597,
    endOffset: 16597,
    startLine: 432,
    endLine: 432,
    startColumn: 14,
    endColumn: 14,
    tokenTypeIdx: 161,
    tokenType: {
      PATTERN: '[',
      tokenTypeIdx: 161,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'LBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'predicateObjectList',
    children: {
      verb: [Array],
      objectList: [Array],
      Semicolon: [Array],
      shaclRulePredicateObjectList: [Array]
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 16601,
    endOffset: 16607,
    startLine: 433,
    endLine: 433,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:name',
    startOffset: 16601,
    endOffset: 16607,
    startLine: 433,
    endLine: 433,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'verb', children: { predicate: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'predicate', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'verb', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { PrefixedName: [Array] } },
  parentCtx: {
    node: { name: 'predicate', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'PrefixedName', children: { PNAME_LN: [Array] } },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 16622,
    endOffset: 16635,
    startLine: 434,
    endLine: 434,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:description',
    startOffset: 16622,
    endOffset: 16635,
    startLine: 434,
    endLine: 434,
    startColumn: 3,
    endColumn: 16,
    tokenTypeIdx: 4,
    tokenType: {
      PATTERN: /(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.))*)((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040])))?))?)(:))(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(:)|(\d)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))((((((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(\.)|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;])))*)(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDBFF][\uDC00-\uDFFF])|(_))|(-)|(\d)|(\u00b7)|([\u0300-\u036f])|([\u203f-\u2040]))|(:)|(((%)([0-9A-Fa-f])([0-9A-Fa-f]))|(\\[_~.\-!\$&'()*+,=\/?#@%;]))))?))/,
      tokenTypeIdx: 4,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'PNAME_LN',
      isParent: true
    }
  },
  parentCtx: {
    node: { name: 'PrefixedName', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"status"',
    startOffset: 16609,
    endOffset: 16616,
    startLine: 433,
    endLine: 433,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"status"',
    startOffset: 16609,
    endOffset: 16616,
    startLine: 433,
    endLine: 433,
    startColumn: 11,
    endColumn: 18,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'objectList', children: { object: [Array] } },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'object', children: { literal: [Array] } },
  parentCtx: {
    node: { name: 'objectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'literal', children: { RDFLiteral: [Array] } },
  parentCtx: {
    node: { name: 'object', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'RDFLiteral', children: { String: [Array] } },
  parentCtx: {
    node: { name: 'literal', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'String', children: { STRING_LITERAL_QUOTE: [Array] } },
  parentCtx: {
    node: { name: 'RDFLiteral', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Actuele toestand van het adres."',
    startOffset: 16637,
    endOffset: 16669,
    startLine: 434,
    endLine: 434,
    startColumn: 18,
    endColumn: 50,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '"Actuele toestand van het adres."',
    startOffset: 16637,
    endOffset: 16669,
    startLine: 434,
    endLine: 434,
    startColumn: 18,
    endColumn: 50,
    tokenTypeIdx: 194,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 194,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'STRING_LITERAL_QUOTE',
      isParent: false,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'String', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16618,
    endOffset: 16618,
    startLine: 433,
    endLine: 433,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16618,
    endOffset: 16618,
    startLine: 433,
    endLine: 433,
    startColumn: 20,
    endColumn: 20,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16671,
    endOffset: 16671,
    startLine: 434,
    endLine: 434,
    startColumn: 52,
    endColumn: 52,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16671,
    endOffset: 16671,
    startLine: 434,
    endLine: 434,
    startColumn: 52,
    endColumn: 52,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16734,
    endOffset: 16734,
    startLine: 435,
    endLine: 435,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16734,
    endOffset: 16734,
    startLine: 435,
    endLine: 435,
    startColumn: 62,
    endColumn: 62,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16793,
    endOffset: 16793,
    startLine: 436,
    endLine: 436,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16793,
    endOffset: 16793,
    startLine: 436,
    endLine: 436,
    startColumn: 58,
    endColumn: 58,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16811,
    endOffset: 16811,
    startLine: 437,
    endLine: 437,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16811,
    endOffset: 16811,
    startLine: 437,
    endLine: 437,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16829,
    endOffset: 16829,
    startLine: 438,
    endLine: 438,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ';',
    startOffset: 16829,
    endOffset: 16829,
    startLine: 438,
    endLine: 438,
    startColumn: 17,
    endColumn: 17,
    tokenTypeIdx: 163,
    tokenType: {
      PATTERN: ';',
      tokenTypeIdx: 163,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'Semicolon',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPropertyPath: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPath',
    children: { SHACL_path: [Array], shaclPropertyPathPath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16675,
    endOffset: 16681,
    startLine: 435,
    endLine: 435,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:path',
    startOffset: 16675,
    endOffset: 16681,
    startLine: 435,
    endLine: 435,
    startColumn: 3,
    endColumn: 9,
    tokenTypeIdx: 514,
    tokenType: {
      PATTERN: 'sh:path',
      CATEGORIES: [Array],
      tokenTypeIdx: 514,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_path_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPropertyPathPath',
    children: { shaclPredicatePath: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclPropertyPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'shaclPredicatePath', children: { iri: [Array] } },
  parentCtx: {
    node: { name: 'shaclPropertyPathPath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicatePath', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres.status> ',
    startOffset: 16683,
    endOffset: 16733,
    startLine: 435,
    endLine: 435,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<https://data.vlaanderen.be/ns/adres#Adres.status> ',
    startOffset: 16683,
    endOffset: 16733,
    startLine: 435,
    endLine: 435,
    startColumn: 11,
    endColumn: 61,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclPredicateIRI: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclPredicateIRI',
    children: { SingleIriTakingPredicate: [Array], iri: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 16738,
    endOffset: 16745,
    startLine: 436,
    endLine: 436,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:class',
    startOffset: 16738,
    endOffset: 16745,
    startLine: 436,
    endLine: 436,
    startColumn: 3,
    endColumn: 10,
    tokenTypeIdx: 469,
    tokenType: {
      PATTERN: 'sh:class',
      CATEGORIES: [Array],
      tokenTypeIdx: 469,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_class_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: { name: 'iri', children: { IRIREF: [Array] } },
  parentCtx: {
    node: { name: 'shaclPredicateIRI', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 16747,
    endOffset: 16792,
    startLine: 436,
    endLine: 436,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '<http://www.w3.org/2004/02/skos/core#Concept> ',
    startOffset: 16747,
    endOffset: 16792,
    startLine: 436,
    endLine: 436,
    startColumn: 12,
    endColumn: 57,
    tokenTypeIdx: 197,
    tokenType: {
      PATTERN: [Function: pattern],
      tokenTypeIdx: 197,
      CATEGORIES: [],
      categoryMatches: [Array],
      categoryMatchesMap: [Object],
      tokenName: 'IRIREF',
      isParent: true,
      LINE_BREAKS: false
    }
  },
  parentCtx: {
    node: { name: 'iri', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 16797,
    endOffset: 16807,
    startLine: 437,
    endLine: 437,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:minCount',
    startOffset: 16797,
    endOffset: 16807,
    startLine: 437,
    endLine: 437,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 478,
    tokenType: {
      PATTERN: 'sh:minCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 478,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_minCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16809,
    endOffset: 16809,
    startLine: 437,
    endLine: 437,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16809,
    endOffset: 16809,
    startLine: 437,
    endLine: 437,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclRulePredicateObjectList',
    children: { shaclLiteralConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'predicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclLiteralConstraint',
    children: { shaclIntConstraint: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclRulePredicateObjectList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    name: 'shaclIntConstraint',
    children: { IntTakingPredicate: [Array], INTEGER: [Array] }
  },
  parentCtx: {
    node: { name: 'shaclLiteralConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 16815,
    endOffset: 16825,
    startLine: 438,
    endLine: 438,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: 'sh:maxCount',
    startOffset: 16815,
    endOffset: 16825,
    startLine: 438,
    endLine: 438,
    startColumn: 3,
    endColumn: 13,
    tokenTypeIdx: 479,
    tokenType: {
      PATTERN: 'sh:maxCount',
      CATEGORIES: [Array],
      tokenTypeIdx: 479,
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'SHACL_maxCount_prefixed',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16827,
    endOffset: 16827,
    startLine: 438,
    endLine: 438,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: '1',
    startOffset: 16827,
    endOffset: 16827,
    startLine: 438,
    endLine: 438,
    startColumn: 15,
    endColumn: 15,
    tokenTypeIdx: 185,
    tokenType: {
      PATTERN: /(([+-])?)(\d+)/,
      tokenTypeIdx: 185,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'INTEGER',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'shaclIntConstraint', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 16832,
    endOffset: 16832,
    startLine: 439,
    endLine: 439,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}
>> SUB {
  node: {
    image: ']',
    startOffset: 16832,
    endOffset: 16832,
    startLine: 439,
    endLine: 439,
    startColumn: 2,
    endColumn: 2,
    tokenTypeIdx: 162,
    tokenType: {
      PATTERN: ']',
      tokenTypeIdx: 162,
      CATEGORIES: [],
      categoryMatches: [],
      categoryMatchesMap: {},
      tokenName: 'RBracket',
      isParent: false
    }
  },
  parentCtx: {
    node: { name: 'blankNodePropertyList', children: [Object] },
    parentCtx: { node: [Object], parentCtx: [Object] }
  }
}

> @solidlab/sdx@0.1.2 start
> npx sdx test

